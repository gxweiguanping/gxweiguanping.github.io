(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{336:function(s,t,a){"use strict";a.r(t);var n=a(8),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"基础概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础概念"}},[s._v("#")]),s._v(" 基础概念")]),s._v(" "),t("h2",{attrs:{id:"进程和线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程"}},[s._v("#")]),s._v(" 进程和线程")]),s._v(" "),t("h3",{attrs:{id:"进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程"}},[s._v("#")]),s._v(" 进程")]),s._v(" "),t("ul",[t("li",[s._v("程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至 CPU，数据加载至内存。在指令运行过程中还需要用到磁盘、网络等设备。"),t("strong",[s._v("进程就是用来加载指令、管理内存、管理 IO 的")]),s._v(" 。")]),s._v(" "),t("li",[s._v("当一个程序被运行，从磁盘加载这个程序的代码至内存，这时就开启了一个进程。")]),s._v(" "),t("li",[t("strong",[s._v("进程就可以视为程序的一个实例")]),s._v("。大部分程序可以同时运行多个实例进程（例如记事本、画图、浏览器等），也有的程序只能启动一个实例进程（例如网易云音乐、360 安全卫士等）。")])]),s._v(" "),t("h3",{attrs:{id:"线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程"}},[s._v("#")]),s._v(" 线程")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("一个进程之内可以分为一到多个线程")]),s._v("。")]),s._v(" "),t("li",[s._v("一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给 CPU 执行 。")]),s._v(" "),t("li",[t("strong",[s._v("Java 中，线程作为最小调度单位，进程作为资源分配的最小单位。 在 windows 中进程是不活动的，只是作为线程的容器。")])])]),s._v(" "),t("h3",{attrs:{id:"二者对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二者对比"}},[s._v("#")]),s._v(" 二者对比")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("进程基本上相互独立的，而线程存在于进程内，是进程的一个子集 。")])]),s._v(" "),t("li",[t("p",[s._v("进程拥有共享的资源，如内存空间等，供其内部的线程共享 。")])]),s._v(" "),t("li",[t("p",[s._v("进程间通信较为复杂")])]),s._v(" "),t("li",[t("ul",[t("li",[s._v("同一台计算机的进程通信称为 IPC（Inter-process communication）")]),s._v(" "),t("li",[s._v("不同计算机之间的进程通信，需要通过网络，并遵守共同的协议，例如 HTTP")])])]),s._v(" "),t("li",[t("p",[s._v("线程通信相对简单，因为它们共享进程内的内存，一个例子是多个线程可以访问同一个共享变量 。")])]),s._v(" "),t("li",[t("p",[s._v("线程更轻量，线程上下文切换成本一般上要比进程上下文切换低。")])])]),s._v(" "),t("h2",{attrs:{id:"并行与并发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并行与并发"}},[s._v("#")]),s._v(" 并行与并发")]),s._v(" "),t("blockquote",[t("p",[s._v("从操作系统的角度来看，线程是CPU分配的最小单位。")])]),s._v(" "),t("p",[s._v("并行就是同一时刻，两个线程都在执行。这就要求有"),t("strong",[s._v("两个CPU")]),s._v("去分别执行两个线程。")]),s._v(" "),t("p",[s._v("并发就是同一时刻，只有一个执行，但是一个时间段内，两个线程都执行了。并发的实现依赖于"),t("strong",[s._v("单个CPU")]),s._v("利用时间片来切换线程，因为切换的时间特别短，所以基本对于用户是无感知的。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/571888342393979.png",alt:"571888342393979"}})]),s._v(" "),t("h2",{attrs:{id:"线程安全"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程安全"}},[s._v("#")]),s._v(" 线程安全")]),s._v(" "),t("p",[s._v("当多个线程访问一个类时，如果不用考虑这些线程在运行时环境下的调度和交替执行，并且不需要额外的同步及在调用方代码不必作其他的协调，这个类的行为仍然是正确的，那么称这个类是线程安全的。")]),s._v(" "),t("h2",{attrs:{id:"原子性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原子性"}},[s._v("#")]),s._v(" 原子性")]),s._v(" "),t("p",[s._v("原子性是指一个操作（或一组操作）被视为"),t("strong",[s._v("不可分割")]),s._v("的整体，要么"),t("strong",[s._v("全部完成")]),s._v("，要么"),t("strong",[s._v("全部不执行")]),s._v("。这意味着，在这个操作的执行过程中，"),t("strong",[s._v("不会被其他线程中断或修改")]),s._v("。")]),s._v(" "),t("p",[s._v("假设我们想要添加计算访问字数，显而易见的方法是在Servlet中加入一个 long类型的域，并在每个请求中递增它。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Factorizer")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Servlet")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("init")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletConfig")]),s._v(" config"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Initialize the counter to zero")]),s._v("\n        count "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletRequest")]),s._v(" req"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletResponse")]),s._v(" resp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BigInteger")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("extractFromRequest")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("req"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BigInteger")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" factors "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("factor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 自增")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("encodeIntoResponse")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("resp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" factors"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("destroy")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Clean up any resources used by this servlet")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getServletInfo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Factorizer Servlet"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br")])]),t("p",[s._v("但是，Factorizer不是线程安全的， ++count看起来像是一个独立的操作，然而它不是原子操作。")]),s._v(" "),t("p",[s._v("具体来说，在 "),t("code",[s._v("service()")]),s._v(" 方法中，++count有三个操作：")]),s._v(" "),t("ol",[t("li",[s._v("获取count当前值")]),s._v(" "),t("li",[s._v("+1")]),s._v(" "),t("li",[s._v("写回新值")])]),s._v(" "),t("p",[s._v("其中，结果是要依赖它之前的值。")]),s._v(" "),t("p",[s._v("假设有两个线程 A 和 B 同时调用 "),t("code",[s._v("service()")]),s._v(" 方法。线程 A 先执行了 "),t("code",[s._v("++count")]),s._v(" 操作，将计数器 "),t("code",[s._v("count")]),s._v(" 的值从 0 更新为 1。在没有写回新值的同时，线程 B 开始执行 "),t("code",[s._v("++count")]),s._v(" 操作，但是它看到的 "),t("code",[s._v("count")]),s._v(" 变量仍然是 0，因为它没有看到线程 A 的更新。因此，线程 B 将 "),t("code",[s._v("count")]),s._v(" 的值也更新为 1，而不是 2。")]),s._v(" "),t("p",[s._v("这样就会导致数据不一致的问题，因为实际上有两次请求被执行了，但是计数器 "),t("code",[s._v("count")]),s._v(" 的值只增加了 1 而不是 2。在实际应用中，这种数据不一致可能会导致严重的错误或故障。")]),s._v(" "),t("h2",{attrs:{id:"可见性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可见性"}},[s._v("#")]),s._v(" 可见性")]),s._v(" "),t("p",[s._v("可见性是指当一个线程对共享变量进行修改后，其他线程能够立即看到这个修改。在多线程环境下，由于每个线程都有自己的本地内存，线程之间对共享变量的修改不一定能够及时同步到主内存和其他线程的本地内存中。可见性保证了共享变量的修改对其他线程是可见的，即能够正确读取到最新的值。")]),s._v(" "),t("h2",{attrs:{id:"有序性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有序性"}},[s._v("#")]),s._v(" 有序性")]),s._v(" "),t("p",[s._v("有序性（Ordering） ：是指程序执行的顺序与代码的顺序一致。在多线程环境下，由于指令重排序和编译器优化的存在，代码的执行顺序可能与代码的编写顺序不一致。有序性保证了程序的执行顺序与代码的顺序一致，即保证了代码的串行语义。")])])}),[],!1,null,null,null);t.default=e.exports}}]);