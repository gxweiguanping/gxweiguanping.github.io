(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{368:function(t,a,s){"use strict";s.r(a);var e=s(8),v=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"jvm监控及诊断工具-gui篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jvm监控及诊断工具-gui篇"}},[t._v("#")]),t._v(" "),a("strong",[t._v("JVM监控及诊断工具-GUI篇")])]),t._v(" "),a("h3",{attrs:{id:"jclasslib-bytecode-viewer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jclasslib-bytecode-viewer"}},[t._v("#")]),t._v(" jclasslib Bytecode Viewer")]),t._v(" "),a("h4",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),a("p",[a("code",[t._v("jclasslib Bytecode Viewer")]),t._v(" 是一个用于查看 Java 字节码的图形化工具。它可以帮助开发人员分析和理解编译后的 Java 类文件中的字节码指令。以下是关于 "),a("code",[t._v("jclasslib Bytecode Viewer")]),t._v(" 的一些介绍：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("字节码查看器")]),t._v("："),a("code",[t._v("jclasslib")]),t._v(" 允许您加载并查看编译后的 Java 类文件的字节码内容。您可以查看类、接口、字段、方法等的字节码指令，以及本地变量、异常表等信息。")]),t._v(" "),a("li",[a("strong",[t._v("图形化界面")]),t._v("："),a("code",[t._v("jclasslib")]),t._v(" 提供了一个直观的图形用户界面，使您可以轻松地浏览和分析字节码。界面中的不同部分（如类层次结构、字段、方法等）以树状结构呈现，方便导航和查看。")]),t._v(" "),a("li",[a("strong",[t._v("字节码分析")]),t._v("：您可以单击类中的方法来查看其字节码指令。"),a("code",[t._v("jclasslib")]),t._v(" 将字节码指令以助记符的形式显示，并提供了解释、注释和帮助文档，帮助您理解每条指令的功能和作用。")]),t._v(" "),a("li",[a("strong",[t._v("本地变量和操作数堆栈")]),t._v("：除了查看字节码指令外，您还可以查看方法的本地变量和操作数堆栈。这对于分析方法的执行过程和变量值非常有用。")]),t._v(" "),a("li",[a("strong",[t._v("修改字节码")]),t._v("："),a("code",[t._v("jclasslib")]),t._v(" 也允许您修改字节码并保存更改后的类文件。这对于进行一些实验性的调试和探索是很有帮助的。")]),t._v(" "),a("li",[a("strong",[t._v("跳转和导航")]),t._v("：界面中的导航按钮和链接可以帮助您快速跳转到不同部分，从而更轻松地浏览和分析类的结构和字节码。")]),t._v(" "),a("li",[a("strong",[t._v("跨平台支持")]),t._v("："),a("code",[t._v("jclasslib")]),t._v(" 是一个跨平台的工具，适用于多种操作系统，如 Windows、Linux 和 macOS。")])]),t._v(" "),a("h4",{attrs:{id:"安装和使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装和使用"}},[t._v("#")]),t._v(" "),a("strong",[t._v("安装和使用")])]),t._v(" "),a("p",[a("strong",[t._v("安装")])]),t._v(" "),a("p",[t._v("1、建议直接通过idea的插件库搜索安装然后重启即可。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230814122652565.png",alt:"image-20230814122652565"}})]),t._v(" "),a("p",[t._v("2、点击 Install安装，安装后点击 Restart IDE 重启 IDEA")]),t._v(" "),a("h4",{attrs:{id:"使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" "),a("strong",[t._v("使用")])]),t._v(" "),a("p",[t._v('1、在Idea的界面中，选择菜单栏中的 "View"（查看）选项。')]),t._v(" "),a("p",[t._v('2、在 "View" 菜单下，选择 "Show Bytecode With jclasslib" 选项。')]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230814123418437.png",alt:"image-20230814123418437"}})]),t._v(" "),a("p",[t._v("3、注意：如果是自己项目的源码需要先编译")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230814123514672.png",alt:"image-20230814123514672"}})]),t._v(" "),a("p",[t._v("jclasslib窗口")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230814140431657.png",alt:"image-20230814140431657"}})]),t._v(" "),a("h3",{attrs:{id:"jconsole"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jconsole"}},[t._v("#")]),t._v(" JConsole")]),t._v(" "),a("h3",{attrs:{id:"visual-vm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#visual-vm"}},[t._v("#")]),t._v(" Visual VM")]),t._v(" "),a("p",[t._v("Visual VM是一个功能强大的多合一故障诊断和性能监控的可视化工具。它集成了多个JDK命令行工具，使用Visual VM可用于显示虚拟机进程及进程的配置和环境信息（jps，jinfo），监视应用程序的CPU、GC、堆、方法区及线程的信息（jstat、jstack）等，甚至代替JConsole。在JDK 6 Update 7以后，Visual VM便作为JDK的一部分发布（VisualVM 在JDK／bin目录下）即："),a("code",[t._v("它完全免费")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("主要功能：")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("1.生成/读取堆内存/线程快照")])]),t._v(" "),a("li",[a("p",[t._v("2.查看JVM参数和系统属性")])]),t._v(" "),a("li",[a("p",[t._v("3.查看运行中的虚拟机进程")])]),t._v(" "),a("li",[a("p",[t._v("4.程序资源的实时监控")])]),t._v(" "),a("li",[a("p",[t._v("5.JMX代理连接、远程环境监控、CPU分析和内存分析")])])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://visualvm.github.io/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方地址"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230819150037279.png",alt:"image-20230819150037279"}})]),t._v(" "),a("h3",{attrs:{id:"jprofiler"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jprofiler"}},[t._v("#")]),t._v(" JProfiler")]),t._v(" "),a("p",[t._v("官网地址：https://www.ej-technologies.com/products/jprofiler/overview.html")]),t._v(" "),a("blockquote",[a("p",[t._v("JProfiler是一款全功能的Java性能分析工具，它提供了丰富的功能和工具，帮助开发人员诊断和解决Java应用程序的性能问题。")])]),t._v(" "),a("h4",{attrs:{id:"特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" "),a("strong",[t._v("特点")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("使用方便、界面操作友好（简单且强大）")])]),t._v(" "),a("li",[a("p",[t._v("对被分析的应用影响小（提供模板）")])]),t._v(" "),a("li",[a("p",[t._v("CPU，Thread，Memory分析功能尤其强大")])]),t._v(" "),a("li",[a("p",[t._v("支持对jdbc，noSql，jsp，servlet，socket等进行分析")])]),t._v(" "),a("li",[a("p",[t._v("支持多种模式（离线，在线）的分析")])]),t._v(" "),a("li",[a("p",[t._v("支持监控本地、远程的JVM")])]),t._v(" "),a("li",[a("p",[t._v("跨平台，拥有多种操作系统的安装版本")])])]),t._v(" "),a("h3",{attrs:{id:"arthas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arthas"}},[t._v("#")]),t._v(" Arthas")]),t._v(" "),a("h3",{attrs:{id:"java-misssion-control"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-misssion-control"}},[t._v("#")]),t._v(" Java Misssion Control")])])}),[],!1,null,null,null);a.default=v.exports}}]);