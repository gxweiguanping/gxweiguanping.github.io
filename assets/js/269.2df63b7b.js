(window.webpackJsonp=window.webpackJsonp||[]).push([[269],{599:function(t,e,v){"use strict";v.r(e);var _=v(8),a=Object(_.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"sso-单点登录和-oauth2-0-有何区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sso-单点登录和-oauth2-0-有何区别"}},[t._v("#")]),t._v(" SSO 单点登录和 OAuth2.0 有何区别？")]),t._v(" "),e("p",[t._v("在微服务时代，用户需要在多个应用程序和服务之间进行无缝切换，同时保持其登录状态。")]),t._v(" "),e("p",[t._v("我们可以通过"),e("code",[t._v("单点登录（SSO）")]),t._v("或者"),e("code",[t._v("OAuth2.0")]),t._v("等身份验证和授权协议来实现这一目标。")]),t._v(" "),e("h3",{attrs:{id:"sso-单点登录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sso-单点登录"}},[t._v("#")]),t._v(" SSO 单点登录")]),t._v(" "),e("p",[t._v("单点登录（SSO）是一种身份验证方法，允许用户在一个应用程序或服务中登录后，无需再次输入凭据即可访问其他相关应用程序或服务。这种方法通过将登录认证和业务系统分离，使用独立的登录中心，实现了在登录中心登录后，所有相关的业务系统都能免登录访问资源。")]),t._v(" "),e("h3",{attrs:{id:"oauth2-0"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#oauth2-0"}},[t._v("#")]),t._v(" OAuth2.0")]),t._v(" "),e("p",[t._v("OAuth2.0 是一种开放授权协议，允许用户授权第三方应用程序访问其存储在服务提供商（如QQ、WeiXin、抖音等）上的特定资源。"),e("code",[t._v("它的最终目的是为第三方应用颁发一个有时效性的令牌 Token，使得第三方应用能够通过该令牌获取相关的资源。")]),t._v("与 SSO 类似，OAuth2.0 也使用了令牌的概念来实现身份验证和授权。")]),t._v(" "),e("p",[t._v("OAuth2.0 定义了四种授权模式，分别是：")]),t._v(" "),e("ul",[e("li",[t._v("授权码模式")]),t._v(" "),e("li",[t._v("隐式模式")]),t._v(" "),e("li",[t._v("密码模式")]),t._v(" "),e("li",[t._v("客户端模式")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("功能点")]),t._v(" "),e("th",[t._v("SSO单点登录")]),t._v(" "),e("th",[t._v("OAuth2.0")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("统一认证")]),t._v(" "),e("td",[t._v("支持度高")]),t._v(" "),e("td",[t._v("支持度高")])]),t._v(" "),e("tr",[e("td",[t._v("统一注销")]),t._v(" "),e("td",[t._v("支持度高")]),t._v(" "),e("td",[t._v("支持度低")])]),t._v(" "),e("tr",[e("td",[t._v("多个系统会话一致性")]),t._v(" "),e("td",[t._v("强一致")]),t._v(" "),e("td",[t._v("弱一致")])]),t._v(" "),e("tr",[e("td",[t._v("第三方应用授权管理")]),t._v(" "),e("td",[t._v("不支持")]),t._v(" "),e("td",[t._v("支持度高")])]),t._v(" "),e("tr",[e("td",[t._v("自有系统授权管理")]),t._v(" "),e("td",[t._v("支持度高")]),t._v(" "),e("td",[t._v("支持度低")])]),t._v(" "),e("tr",[e("td",[t._v("Client级的权限校验")]),t._v(" "),e("td",[t._v("不支持")]),t._v(" "),e("td",[t._v("支持度高")])]),t._v(" "),e("tr",[e("td",[t._v("集成简易度")]),t._v(" "),e("td",[t._v("比较简单")]),t._v(" "),e("td",[t._v("难度中等")])])])]),t._v(" "),e("h2",{attrs:{id:"jwt-的续签问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jwt-的续签问题"}},[t._v("#")]),t._v(" JWT 的续签问题")]),t._v(" "),e("blockquote",[e("p",[t._v("实际上就是实现"),e("strong",[t._v("用户在线操作不掉线功能")])])]),t._v(" "),e("h3",{attrs:{id:"用户登录返回两个jwt"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用户登录返回两个jwt"}},[t._v("#")]),t._v(" 用户登录返回两个JWT")]),t._v(" "),e("blockquote",[e("p",[t._v("第一个是 AccessToken(访问token) ，它的过期时间 JWT 本身的过期时间比如两个小时。")]),t._v(" "),e("p",[t._v("另外一个是RefreshToken(刷新token)  它的过期时间更长一点比如为 1 天。")])]),t._v(" "),e("p",[t._v("1、前端请求登录后，服务端返回两个JWT，分别是AccessToken 和 RefreshToken，前端一般是保存在 localStorage，接下来前端每次访问都将 AccessToken放到请求头里面传给服务端。")]),t._v(" "),e("p",[t._v("2、服务端校验 AccessToken 的有效性。")]),t._v(" "),e("ul",[e("li",[t._v("如果没有过期，那正常执行流程。")]),t._v(" "),e("li",[t._v("如果过期的话，会返回错误信息给前端说明token过期。前端就再将 RefreshToken 传给服务端。\n"),e("ul",[e("li",[t._v("如果RefreshToken 此时还是有效的，服务端就生成新的 AccessToken和新的RefreshToken一起给前端。")]),t._v(" "),e("li",[t._v("否则，给前端就需要重新登录即可。")])])])]),t._v(" "),e("p",[t._v("这种方案的不足是：")]),t._v(" "),e("ul",[e("li",[t._v("需要前端来配合；")]),t._v(" "),e("li",[t._v("用户注销的时候需要同时保证两个 JWT 都无效；")]),t._v(" "),e("li",[t._v("重新请求获取 JWT 的过程中会有短暂 JWT 不可用的情况\n"),e("ul",[e("li",[t._v("可以通过在前端设置定时器，当 AccessToken 快过期的时候，提前去通过 RefreshToken 获取新的 AccessToken ;")])])]),t._v(" "),e("li",[t._v("存在安全问题，只要拿到了未过期的 RefreshToken 就一直可以获取到 AccessToken 。")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/diagram-5199779098068022192.png",alt:"diagram-5199779098068022192"}})]),t._v(" "),e("h3",{attrs:{id:"利用缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#利用缓存"}},[t._v("#")]),t._v(" 利用缓存")]),t._v(" "),e("blockquote",[e("p",[t._v("注意： 前端请求Header中设置Authorization保持不变，校验有效性以缓存中的token为准。")]),t._v(" "),e("p",[t._v("用户过期时间 = Jwt有效时间 * 2。")])]),t._v(" "),e("p",[t._v("1、前端请求登录成功后将用户的JWT生成的Token作为k、v存储到cache缓存里面(这时k、v值一样)，缓存有效期设置为JWT有效时间的    \t  2倍")]),t._v(" "),e("p",[t._v("2、当该用户这次请求JWT生成的token值已经超时(可通过JWT的工具类判断token是否已经超时)。")]),t._v(" "),e("ul",[e("li",[t._v("但该token对应cache中的k还是存在，则表示该用户一直在操作只是JWT的token失效了，程序会给token对应的k映射的v值重新生成JWTToken并覆盖v值，该缓存生命周期重新计算")]),t._v(" "),e("li",[t._v("并在cache中不存在对应的k，则表示该用户账户空闲超时，返回用户信息已失效，请重新登录。")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/diagram-15871549238506542283.png",alt:"diagram-15871549238506542283"}})]),t._v(" "),e("h2",{attrs:{id:"jwt-基础概念详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jwt-基础概念详解"}},[t._v("#")]),t._v(" JWT 基础概念详解")]),t._v(" "),e("h3",{attrs:{id:"什么是-jwt"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是-jwt"}},[t._v("#")]),t._v(" 什么是 JWT?")]),t._v(" "),e("p",[t._v("JWT全称为JSON Web Token，它本质上是一种基于JSON格式表示的令牌。是目前最流行的跨域认证解决方案。并且， 使用 JWT 认证可以有效避免 CSRF 攻击，因为 JWT 一般是存在在 localStorage 中，使用 JWT 进行身份验证的过程中是不会涉及到 Cookie 的。")]),t._v(" "),e("h3",{attrs:{id:"jwt-由哪些部分组成"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jwt-由哪些部分组成"}},[t._v("#")]),t._v(" JWT 由哪些部分组成？")]),t._v(" "),e("blockquote",[e("p",[t._v("格式："),e("strong",[t._v("Header.Payload.Signature")])])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20240312152208751.png",alt:"image-20240312152208751"}})]),t._v(" "),e("p",[t._v("JWT 本质上就是一组字串，通过（"),e("code",[t._v(".")]),t._v("）切分成三个为 Base64 编码的部分：")]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("Header（头部）")]),t._v(" : 描述 JWT 的元数据，定义了生成签名的算法以及 "),e("code",[t._v("Token")]),t._v(" 的类型。")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("Payload（有效载荷）")]),t._v(" : "),e("strong",[t._v("有效载荷")]),t._v("部分，是JWT的主体内容部分，也是一个"),e("strong",[t._v("JSON对象")]),t._v("，"),e("strong",[t._v("包含需要传递的数据")]),t._v("。 JWT指定七个默认字段供选择。除以上默认字段外，我们还可以自定义私有字段，"),e("strong",[t._v("一般会把包含用户信息的数据放到payload中")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("默认字段")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("iss")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("JWT 签发方")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("strong",[t._v("exp")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("JWT 的过期时间")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("sub")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("JWT 主题")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("aud")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("JWT 接收方")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("nbf")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("JWT 生效时间，早于该定义的时间的 JWT 不能被接受处理")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("iat")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("JWT 签发时间")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("jti")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("JWT 唯一标识")])])])]),t._v(" "),e("blockquote",[e("p",[t._v("请注意，"),e("strong",[t._v("默认情况下JWT是未加密的，因为只是采用base64算法，拿到JWT字符串后可以转换回原本的JSON数据，任何人都可以解读其内容，因此不要构建隐私信息字段，比如用户的密码一定不能保存到JWT中")]),t._v("，以防止信息泄露。"),e("strong",[t._v("JWT只是适合在网络中传输一些非敏感的信息")])])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("Signature（签名）")]),t._v("：签名哈希部分是对上面两部分数据签名，需要使用base64编码后的header和payload数据，通过指定的算法生成哈希，以确保数据不会被篡改。首先，需要指定一个密钥（secret）。该密码仅仅为保存在服务器中，并且不能向用户公开。然后，使用header中指定的签名算法（默认情况下为HMAC SHA256）根据以下公式生成签名")])])]),t._v(" "),e("blockquote",[e("p",[t._v("signature由于使用了不可逆的加密算法，无法解码出原文，它的作用是 校验token有没有被篡改。服务端获取 header中的加密算法之后，利用该算法加上 secretKey对 header、 payload进行加密，比对加密后的数据和客户端发送过来的是否一致。注意 secretKey只能保存在服务端，而且对于不同的加密算法其含义有所不同，一般对于MD5类型的摘要加密算法， secretKey实际上代表的是盐值")])])])}),[],!1,null,null,null);e.default=a.exports}}]);