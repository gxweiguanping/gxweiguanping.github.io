(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{452:function(r,s,e){"use strict";e.r(s);var a=e(8),t=Object(a.a)({},(function(){var r=this,s=r._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[s("h2",{attrs:{id:"安装私服-registry"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装私服-registry"}},[r._v("#")]),r._v(" 安装私服-registry")]),r._v(" "),s("p",[r._v("Docker Registry 是一个服务，用于存储和分发 Docker 镜像。你可以使用 Docker 命令行工具推送和拉取镜像到和从你的 Registry，或者")]),r._v(" "),s("p",[r._v("使用 Docker 镜像仓库（例如 Docker Hub）的公共或私有仓库。")]),r._v(" "),s("h3",{attrs:{id:"步骤1-拉取registry镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#步骤1-拉取registry镜像"}},[r._v("#")]),r._v(" "),s("strong",[r._v("步骤1：拉取registry镜像")])]),r._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[r._v("docker")]),r._v(" pull registry\n")])]),r._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[r._v("1")]),s("br")])]),s("h3",{attrs:{id:"步骤2-运行-docker-registry-容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#步骤2-运行-docker-registry-容器"}},[r._v("#")]),r._v(" "),s("strong",[r._v("步骤2：运行 Docker Registry 容器")])]),r._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[r._v("docker")]),r._v(" run "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[r._v("-d")]),r._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[r._v("-p")]),r._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[r._v("5000")]),r._v(":5000 "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[r._v("--restart")]),s("span",{pre:!0,attrs:{class:"token operator"}},[r._v("=")]),r._v("always "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[r._v("--name")]),r._v(" registry "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[r._v("-e")]),r._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[r._v("REGISTRY_STORAGE_DELETE_ENABLED")]),s("span",{pre:!0,attrs:{class:"token operator"}},[r._v("=")]),r._v("true "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[r._v("-v")]),r._v(" /mnt/registry:/var/lib/registry registry:2\n")])]),r._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[r._v("1")]),s("br")])]),s("p",[r._v("这个命令的各个部分的含义如下：")]),r._v(" "),s("ul",[s("li",[s("code",[r._v("docker run -d")]),r._v("：这个命令是用来运行一个新的 Docker 容器。"),s("code",[r._v("-d")]),r._v(" 参数使容器在后台运行，并返回容器 ID。")]),r._v(" "),s("li",[s("code",[r._v("-p 5000:5000")]),r._v("：这个参数将容器的 5000 端口映射到宿主机的 5000 端口。这样，任何发送到宿主机 5000 端口的请求都会被转发到容器的 5000 端口。")]),r._v(" "),s("li",[s("code",[r._v("--restart=always")]),r._v("：这个参数设置容器的重启策略为 always，也就是说，无论容器的退出代码是什么，Docker 都会自动重启容器。")]),r._v(" "),s("li",[s("code",[r._v("--name registry")]),r._v("：这个参数给容器设置一个名字，这样你就可以用 "),s("code",[r._v("docker stop registry")]),r._v(" 这样的命令来停止容器，而不是使用容器 ID。")]),r._v(" "),s("li",[s("code",[r._v("-e REGISTRY_STORAGE_DELETE_ENABLED=true")]),r._v(" 参数来启用删除功能。")]),r._v(" "),s("li",[s("code",[r._v("-v /mnt/registry:/var/lib/registry")]),r._v("：这个参数将宿主机的 "),s("code",[r._v("/mnt/registry")]),r._v(" 目录挂载到容器的 "),s("code",[r._v("/var/lib/registry")]),r._v(" 目录。这意味着在容器内部对 "),s("code",[r._v("/var/lib/registry")]),r._v(" 目录的任何修改都会反映到宿主机的 "),s("code",[r._v("/mnt/registry")]),r._v(" 目录。")]),r._v(" "),s("li",[s("code",[r._v("registry:2")]),r._v("：这是要运行的 Docker 镜像的名字和标签。在这个例子中，你正在运行名为 "),s("code",[r._v("registry")]),r._v(" 的镜像，标签为 "),s("code",[r._v("2")]),r._v("。")])]),r._v(" "),s("h3",{attrs:{id:"步骤3-验证-docker-registry-运行情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#步骤3-验证-docker-registry-运行情况"}},[r._v("#")]),r._v(" "),s("strong",[r._v("步骤3：验证 Docker Registry 运行情况")])]),r._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[r._v("http://ip:5000/v2/_catalog\n")])]),r._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[r._v("1")]),s("br")])]),s("h3",{attrs:{id:"步骤4-docker配置信任仓库地址"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#步骤4-docker配置信任仓库地址"}},[r._v("#")]),r._v(" "),s("strong",[r._v("步骤4：docker配置信任仓库地址")])]),r._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[r._v("vi")]),r._v(" /etc/docker/daemon.json\n"),s("span",{pre:!0,attrs:{class:"token string"}},[r._v('"insecure-registries"')]),r._v(":"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[r._v('"ip:5000"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("]")]),r._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[r._v("# 添加之后重启 docker，这时 docker 就信任 registry 地址了。")]),r._v("\n")])]),r._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[r._v("1")]),s("br"),s("span",{staticClass:"line-number"},[r._v("2")]),s("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);