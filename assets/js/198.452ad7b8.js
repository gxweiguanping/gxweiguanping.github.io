(window.webpackJsonp=window.webpackJsonp||[]).push([[198],{529:function(t,a,s){"use strict";s.r(a);var e=s(8),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" Map")]),t._v(" "),a("h2",{attrs:{id:"hashmap的数据结构吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap的数据结构吗"}},[t._v("#")]),t._v(" HashMap的数据结构吗？")]),t._v(" "),a("p",[t._v("JDK1.7的数据结构是 "),a("code",[t._v("数组")]),t._v(" + "),a("code",[t._v("单向链表")])]),t._v(" "),a("p",[t._v("JDK1.8的数据结构是 "),a("code",[t._v("数组")]),t._v(" + "),a("code",[t._v("单向链表")]),t._v(" + "),a("code",[t._v("红黑树")])]),t._v(" "),a("p",[t._v("数据结构示意图如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/459960544024700.png",alt:"459960544024700"}})]),t._v(" "),a("p",[t._v("几个关键点：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("存储结构")]),t._v(" ：HashMap内部使用一个数组（Entry[]）来存储数据。数组中的每个元素称为一个桶（Bucket），每个桶存储一个键值对（Entry）。")]),t._v(" "),a("li",[a("strong",[t._v("哈希函数")]),t._v(" ：HashMap使用键的哈希码（hash code）来计算存储位置。每个键值对根据哈希函数计算得到一个桶的索引，然后将键值对存储在该桶中。")]),t._v(" "),a("li",[a("strong",[t._v("冲突处理")]),t._v(" ：由于哈希函数的计算结果可能会出现冲突，即不同的键计算得到相同的桶索引。HashMap使用链表或红黑树来解决冲突。当桶中的元素较少时，使用链表存储键值对；当桶中的元素较多时，将链表转换为红黑树，以提高查找、插入和删除的效率。")])]),t._v(" "),a("h2",{attrs:{id:"hashmap-的底层实现版本对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-的底层实现版本对比"}},[t._v("#")]),t._v(" HashMap 的底层实现版本对比？")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("jdk1.7")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("jdk1.8")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("初始化")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("在底层创建了长度为16的Entry[] table的数组")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("使用HashMap()的构造器创建对象时，并没有在底层初始化长度为16的table数组")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("节点类的变化")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("使用的是"),a("code",[t._v("Entry")]),t._v("类")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("HashMap的键值对被封装在"),a("code",[t._v("Node")]),t._v("类中")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("元素添加方式")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("如果当前位置有其他元素，则是"),a("code",[t._v("新元素指向旧元素")]),t._v("，采用"),a("code",[t._v("头插法")]),t._v("插入元素")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("如果当前位置有其他元素，则是旧的元素指向新的元素，采用"),a("code",[t._v("尾插法")]),t._v("插入元素")]),t._v(" "),a("td",[t._v("口诀："),a("code",[t._v("七上八下")])])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("数据结构")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("数组+单向链表")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("数组+单向链表+红黑树")]),t._v(" "),a("td")])])]),t._v(" "),a("p",[a("strong",[t._v("红黑树出现与退化的时机：")])]),t._v(" "),a("ul",[a("li",[t._v("当某个索引i位置的"),a("code",[t._v("链表的长度达到8，且数组的长度超过64时")]),t._v("，此索引位置上的元素要从单向链表改为红黑树。")]),t._v(" "),a("li",[t._v("如果索引i位置上是红黑树，当不断删除元素的情况下，当前索引i位置上的"),a("code",[t._v("元素的个数低于6时")]),t._v("，要从红黑树改为单向链表。")])]),t._v(" "),a("h2",{attrs:{id:"你对红黑树了解多少-为什么不用二叉树-平衡树呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#你对红黑树了解多少-为什么不用二叉树-平衡树呢"}},[t._v("#")]),t._v(" 你对红黑树了解多少？为什么不用二叉树/平衡树呢？")]),t._v(" "),a("h3",{attrs:{id:"什么是红黑树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是红黑树"}},[t._v("#")]),t._v(" 什么是红黑树？")]),t._v(" "),a("blockquote",[a("p",[t._v("红黑树是一种自平衡的二叉搜索树")])]),t._v(" "),a("p",[t._v("它具有以下特性：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("二叉搜索树性质 ：左子节点的值小于等于当前节点的值，右子节点的值大于等于当前节点的值。")])]),t._v(" "),a("li",[a("p",[t._v("节点颜色：每个节点是红色或者黑色")])]),t._v(" "),a("li",[a("p",[t._v("根节点：根节点是黑色")])]),t._v(" "),a("li",[a("p",[t._v("叶子节点：每个叶子节点（NIL）是黑色。（注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点）")])]),t._v(" "),a("li",[a("p",[t._v("红色节点限制 ：每个红色节点的两个子节点都是黑色的。(从每个叶子到根的所有路径上不能有两个连续的红色节点)")])]),t._v(" "),a("li",[a("p",[t._v("黑色节点计数 ：从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点（确保没有一条路径会比其他路径长出2倍）")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20240310153519745.png",alt:"image-20240310153519745"}})]),t._v(" "),a("h3",{attrs:{id:"为什么不用二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么不用二叉树"}},[t._v("#")]),t._v(" 为什么不用二叉树？")]),t._v(" "),a("p",[t._v("红黑树相对于普通的二叉搜索树的优势在于它能够保持良好的平衡，性能更加优秀和稳定。")]),t._v(" "),a("p",[a("code",[t._v("普通的二叉搜索树在最坏情况下可能会退化成链表，导致插入、删除和查找操作的时间复杂度变为O(n)。")])]),t._v(" "),a("p",[t._v("而红黑树通过自平衡的特性，避免了这种退化情况，保证了操作的最坏时间复杂度为"),a("code",[t._v("O(log n)")]),t._v("，其中n是树中节点的数量。")]),t._v(" "),a("h3",{attrs:{id:"为什么不用平衡二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么不用平衡二叉树"}},[t._v("#")]),t._v(" 为什么不用平衡二叉树？")]),t._v(" "),a("p",[t._v("相比于平衡二叉树，红黑树在保持平衡的过程中旋转的次数较少，提高了插入和删除操作的效率。")]),t._v(" "),a("p",[t._v("红黑树通过引入节点颜色和特定性质，"),a("code",[t._v("保证了树的相对平衡")]),t._v("，"),a("code",[t._v("而平衡二叉树要求更严格的平衡条件")]),t._v("，需要更多的旋转操作来保持平衡，导致插入和删除操作的效率较低。因此，红黑树是一种更常用和广泛应用的平衡树结构。")]),t._v(" "),a("h3",{attrs:{id:"红黑树怎么保持平衡的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#红黑树怎么保持平衡的"}},[t._v("#")]),t._v(" 红黑树怎么保持平衡的?")]),t._v(" "),a("h4",{attrs:{id:"左倾染色"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#左倾染色"}},[t._v("#")]),t._v(" 左倾染色")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/005933663895595.png",alt:"005933663895595"}})]),t._v(" "),a("ul",[a("li",[t._v("染色时根据当前节点的爷爷节点，找到当前节点的叔叔节点。")]),t._v(" "),a("li",[t._v("再把父节点染黑、叔叔节点染黑，爷爷节点染红。但爷爷节点染红是临时的，当平衡树高操作后会把根节点染黑。")])]),t._v(" "),a("h4",{attrs:{id:"右倾染色"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#右倾染色"}},[t._v("#")]),t._v(" 右倾染色")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/816348716345781.png",alt:"816348716345781"}})]),t._v(" "),a("h4",{attrs:{id:"左旋调衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#左旋调衡"}},[t._v("#")]),t._v(" 左旋调衡")]),t._v(" "),a("p",[a("strong",[t._v("一次左旋")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/122864102504351.png",alt:"122864102504351"}})]),t._v(" "),a("p",[a("strong",[t._v("右旋+左旋")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/883632216174285.png",alt:"883632216174285"}})]),t._v(" "),a("h4",{attrs:{id:"右旋调衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#右旋调衡"}},[t._v("#")]),t._v(" 右旋调衡")]),t._v(" "),a("p",[a("strong",[t._v("一次右旋")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/364050111783462.png",alt:"364050111783462"}})]),t._v(" "),a("p",[a("strong",[t._v("左旋+右旋")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/770551471349184.png",alt:"770551471349184"}})]),t._v(" "),a("h2",{attrs:{id:"hashmap的put流程知道吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap的put流程知道吗"}},[t._v("#")]),t._v(" HashMap的put流程知道吗？")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/627545056344100.png",alt:"627545056344100"}})]),t._v(" "),a("ol",[a("li",[a("p",[t._v("首先进行哈希值的扰动，获取一个新的哈希值。 "),a("code",[t._v("(key == null) ? 0 : (h =key.hashCode()) ^ (h >>> 16);")])])]),t._v(" "),a("li",[a("p",[t._v("判断tab是否为空或者长度为0，如果是则进行扩容操作。")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tab "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\tn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tab "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v("根据哈希值计算下标，如果对应下标正好没有存放数据，则直接插入即可否则需要覆盖。 "),a("code",[t._v("tab[i = (n - 1) & hash])")])])]),t._v(" "),a("li",[a("p",[t._v("判断tab[i]是否为树节点，否则向链表中插入数据，是则向树中插入节点。")])]),t._v(" "),a("li",[a("p",[t._v("如果链表中插入节点的时候，"),a("code",[t._v("链表长度大于等于8并且当前map的数组长度大于64")]),t._v("，则需要把链表转换为红黑树。 "),a("code",[t._v("treeifyBin(tab, hash);")])])]),t._v(" "),a("li",[a("p",[t._v("最后所有元素处理完成后，判断是否超过阈值； "),a("code",[t._v("threshold")]),t._v(" ，超过则扩容。")])])]),t._v(" "),a("h2",{attrs:{id:"hashmap怎么查找元素的呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap怎么查找元素的呢"}},[t._v("#")]),t._v(" HashMap怎么查找元素的呢？")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/460957591815592.png",alt:"460957591815592"}})]),t._v(" "),a("p",[t._v("HashMap的查找就简单很多：")]),t._v(" "),a("ol",[a("li",[t._v("使用扰动函数，获取新的哈希值")]),t._v(" "),a("li",[t._v("计算数组下标，获取节点")]),t._v(" "),a("li",[t._v("当前节点和key匹配，直接返回")]),t._v(" "),a("li",[t._v("否则，当前节点是否为树节点，查找红黑树")]),t._v(" "),a("li",[t._v("否则，遍历链表查找")])]),t._v(" "),a("h2",{attrs:{id:"hashmap源码中在计算hash值的时候为什么要无符号右移16位"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap源码中在计算hash值的时候为什么要无符号右移16位"}},[t._v("#")]),t._v(" HashMap源码中在计算hash值的时候为什么要无符号右移16位？")]),t._v(" "),a("blockquote",[a("p",[t._v("所谓扰动函数指的就是 HashMap 的 hash 方法。使用 hash 方法也就是扰动函数是为了防止一些实现比较差的 hashCode() 方法 换句话说使用扰动函数之后可以减少碰撞。")]),t._v(" "),a("p",[t._v("尽量扰动计算的出来的hash值，减少哈希冲突。")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Hash")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("65536")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("311156")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("p",[t._v("⚠️注意 ： 扰动函数只有在hashCode值大于65536的时候效果才是最显著的，因为需要右移16位，所以hashCode值转换成二进制的位置要大于16位，也就是2的16次方（65536），如果hashCode太小，扰动的效果不大，因为hashCode跟hashCode右移16位进行异或时，将会得到它本身。")]),t._v(" "),a("p",[a("strong",[t._v("补充知识点：")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("运算符")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("运算")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("＆")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("与运算")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("如果相对应位都是1，则结果为1，否则为0")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("|")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("或运算")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("如果相对应位都是 0，则结果为 0，否则为 1")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("^")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("异或运算")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("如果相对应位值相同，则结果为0，否则为1")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("〜")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("取反运算")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("按位取反运算符翻转操作数的每一位，即0变成1，1变成0。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("<<")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("左移运算")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("空位补0，被移除的高位丢弃，空缺位补0。数据每向左移动一位，相当于原数据*2")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v(">>")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("右移运算")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("被移位的二进制最高位是0，右移后，空缺位补0。最高位是1，空缺位补1。数据每向右移动一位，相当于原数据/2")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v(">>>")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("无符号右移")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("被移位二进制最高位无论是0或者是1，空缺位都用0补。")])])])]),t._v(" "),a("p",[a("strong",[t._v("（1）左移：<<")])]),t._v(" "),a("p",[t._v("运算规则：在一定范围内，数据每向左移动一位，相当于原数据*2。（正数、负数都适用）")]),t._v(" "),a("p",[t._v("【注意】当左移的位数n超过该数据类型的总位数时，相当于左移（n-总位数）位")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("  类似于  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("的"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("次幂 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("48")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20200225113651675.png",alt:"image-20200225113651675"}})]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("  类似于  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("的"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("次幂 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("48")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20240310212356703.png",alt:"image-20240310212356703"}})]),t._v(" "),a("p",[a("strong",[t._v("（2）右移：>>")])]),t._v(" "),a("p",[t._v("运算规则：在一定范围内，数据每向右移动一位，相当于原数据/2。（正数、负数都适用）")]),t._v(" "),a("p",[t._v("【注意】如果不能整除，"),a("code",[t._v("向下取整")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("69")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("  类似于  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("69")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("的"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("次 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("69")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20240310212417510.png",alt:"image-20240310212417510"}})]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-69>>4  类似于  -69/2的4次 = -69/16 = -5\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20240310212432679.png",alt:"image-20240310212432679"}})]),t._v(" "),a("p",[a("strong",[t._v("（3）无符号右移：>>>")])]),t._v(" "),a("p",[t._v("运算规则：往右移动后，左边空出来的位直接补0。（正数、负数都适用）")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("69>>>4  类似于  69/2的4次 = 69/16 =4\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20240310212441829.png",alt:"image-20240310212441829"}})]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-69>>>4   结果：268435451\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20240310212454649.png",alt:"image-20240310212454649"}})]),t._v(" "),a("p",[a("strong",[t._v("（4）按位与：&")])]),t._v(" "),a("p",[t._v("运算规则：对应位都是1才为1，否则为0。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("1 & 1 结果为1")])]),t._v(" "),a("li",[a("p",[t._v("1 & 0 结果为0")])]),t._v(" "),a("li",[a("p",[t._v("0 & 1 结果为0")])]),t._v(" "),a("li",[a("p",[t._v("0 & 0 结果为0")])])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20200225122440953.png",alt:"image-20200225122440953"}})]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20240310212525833.png",alt:"image-20240310212525833"}})]),t._v(" "),a("p",[a("strong",[t._v("（5）按位或：|")])]),t._v(" "),a("p",[t._v("运算规则：对应位只要有1即为1，否则为0。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("1 | 1 结果为1")])]),t._v(" "),a("li",[a("p",[t._v("1 | 0 结果为1")])]),t._v(" "),a("li",[a("p",[t._v("0 | 1 结果为1")])]),t._v(" "),a("li",[a("p",[t._v("0 & 0 结果为0")])])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//结果： 15")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20240310212533134.png",alt:"image-20240310212533134"}})]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//结果： -9")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20240310212547890.png",alt:"image-20240310212547890"}})]),t._v(" "),a("p",[a("strong",[t._v("（6）按位异或：^")])]),t._v(" "),a("p",[t._v("运算规则：对应位一个为1一个为0，才为1，否则为0。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("1 ^ 1 结果为0")])]),t._v(" "),a("li",[a("p",[t._v("1 ^ 0 结果为1")])]),t._v(" "),a("li",[a("p",[t._v("0 ^ 1 结果为1")])]),t._v(" "),a("li",[a("p",[t._v("0 ^ 0 结果为0")])])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//结果为14")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20240310212556840.png",alt:"image-20240310212556840"}})]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//结果为-16")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20240310212603231.png",alt:"image-20240310212603231"}})]),t._v(" "),a("p",[a("strong",[t._v("（7）按位取反：~")])]),t._v(" "),a("p",[t._v("运算规则：对应位为1，则结果为0；对应位为0，则结果为1。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("~0就是1")])]),t._v(" "),a("li",[a("p",[t._v("~1就是0")])])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//结果：-10")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20200225124112662.png",alt:"image-20200225124112662"}})]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//结果：8")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20240310212620214.png",alt:"image-20240310212620214"}})]),t._v(" "),a("h2",{attrs:{id:"为什么hashmap的容量是2的幂次方呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么hashmap的容量是2的幂次方呢"}},[t._v("#")]),t._v(" 为什么HashMap的容量是2的幂次方呢？")]),t._v(" "),a("p",[t._v("1、是为了方便哈希取余")]),t._v(" "),a("blockquote",[a("p",[t._v("因为hash值是一个整数，而数组的长度也是一个整数，计算下标就有两种思路：")])]),t._v(" "),a("p",[t._v("①hash 值 % table.length会得到一个[0,table.length-1]范围的值，正好是下标范围，但是用%运算效率没有位运算符&高。")]),t._v(" "),a("p",[t._v("②hash 值 & (table.length-1)，任何数 & (table.length-1)的结果也一定在[0, table.length-1]范围。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20240310203025447.png",alt:"image-20240310203025447"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/1522263800372286.png",alt:"1522263800372286"}})]),t._v(" "),a("p",[t._v("2、降低冲突")]),t._v(" "),a("blockquote",[a("p",[t._v("因为如果数组的长度为2的n次幂，那么table.length-1的二进制就是一个"),a("code",[t._v("高位全是0")]),t._v("，"),a("code",[t._v("低位全是1")]),t._v("的数字，这样才能保证每一个下标位置都有机会被用到。")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",[t._v("二进制")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("16（length）")]),t._v(" "),a("td",[t._v("00010000")])]),t._v(" "),a("tr",[a("td",[t._v("16-1（length-1）")]),t._v(" "),a("td",[t._v("00001111")])]),t._v(" "),a("tr",[a("td",[t._v("32（length）")]),t._v(" "),a("td",[t._v("00100000")])]),t._v(" "),a("tr",[a("td",[t._v("32-1（length-1）")]),t._v(" "),a("td",[t._v("00011111")])])])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hashCode值是   ？")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// table.length是16")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// table.length-1是15")]),t._v("\n\n？   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v("\t "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("00001111")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("_____________\n\t "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("00000000")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\t "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("00000001")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\t "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("00000010")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\t "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("00000011")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\t "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\t "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("00001111")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\t 范围是"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("，一定在"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("范围内\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 假如hashCode是32，结果是0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("00100000")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v("\t "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("00001111")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("_____________\n     "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("00000000")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 那假如hashCode是31呢？结果16")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("00011111")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v("\t "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("00001111")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("_____________\n     "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("00001111")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 那假如hashCode是30呢？结果14")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("00011110")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v("\t "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("00001111")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("_____________\n     "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("00001110")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br")])]),a("p",[t._v("通过以上可以发现，只有hashCode变化，就有可能得到不一样的下标，并且保证每一个下标位置都有机会被用到。")]),t._v(" "),a("h2",{attrs:{id:"如果初始化hashmap-传一个17的值-new-hashmap-它会怎么处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如果初始化hashmap-传一个17的值-new-hashmap-它会怎么处理"}},[t._v("#")]),t._v(" 如果初始化HashMap，传一个17的值 new HashMap<> ，它会怎么处理？")]),t._v(" "),a("p",[t._v("简单来说，就是初始化时，传的不是2的倍数时，HashMap会向上寻找 "),a("code",[t._v("离得最近的2的倍数")]),t._v(" ，所以传入17，但HashMap的实际容量是32。")]),t._v(" "),a("p",[t._v("我们来看看详情，在HashMap的初始化中，有这样⼀段⽅法：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" initialCapacity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" loadFactor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("loadFactor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" loadFactor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("threshold "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tableSizeFor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("initialCapacity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("ul",[a("li",[t._v("阀值 threshold ，通过⽅法 tableSizeFor 进⾏计算，是根据初始化传的参数来计算的。")]),t._v(" "),a("li",[t._v("同时，这个⽅法也要要寻找⽐初始值⼤的，最⼩的那个2进制数值。⽐如传了17，我应该找到的是32。")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tableSizeFor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" cap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|=")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|=")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|=")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|=")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|=")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAXIMUM_CAPACITY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAXIMUM_CAPACITY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("ul",[a("li",[t._v("MAXIMUM_CAPACITY = 1 << 30，这个是临界范围，也就是最⼤的Map集合。")]),t._v(" "),a("li",[t._v("计算过程是向右移位1、2、4、8、16，和原来的数做 | 运算，这主要是为了把⼆进制的各个位置都填上1，当⼆进制的各个位置都是1以后，就是⼀个标准的2的倍数减1了，最后把结果加1再返回即可。")])]),t._v(" "),a("p",[t._v("以17为例，看一下初始化计算table容量的过程：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/202185494485573.png",alt:"202185494485573"}})]),t._v(" "),a("h2",{attrs:{id:"解决哈希冲突有哪些方法呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决哈希冲突有哪些方法呢"}},[t._v("#")]),t._v(" 解决哈希冲突有哪些方法呢？")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("链地址法")]),t._v(" ：在冲突的位置拉一个链表，把冲突的元素放进去。")]),t._v(" "),a("li",[a("code",[t._v("开放定址法")]),t._v("：开放定址法就是从冲突的位置再接着往下找，给冲突元素找个空位。找到空闲位置的方法也有很多种：\n"),a("ul",[a("li",[t._v("线行探查法: 从冲突的位置开始，依次判断下一个位置是否空闲，直至找到空闲位置")]),t._v(" "),a("li",[t._v("平方探查法: 从冲突的位置x开始，第一次增加 1^2 个位置，第二次增加2^2 …，直至找到空闲的位置")])])]),t._v(" "),a("li",[t._v("再哈希法 ：换种哈希函数，重新计算冲突元素的地址。")]),t._v(" "),a("li",[t._v("建立公共溢出区 ：再建一个数组，把冲突的元素放进去。")])]),t._v(" "),a("h2",{attrs:{id:"hashmap扩容机制了解吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap扩容机制了解吗"}},[t._v("#")]),t._v(" HashMap扩容机制了解吗？")]),t._v(" "),a("p",[t._v("HashMap是基于数组+链表和红黑树实现的，但用于存放key值的桶数组的长度是固定的，由初始化参数确定。")]),t._v(" "),a("p",[t._v("那么，随着数据的插入数量增加以及负载因子的作用下，就需要扩容来存放更多的数据。而扩容中有一个非常重要的点，就是jdk1.8中的优化操作，可以不需要再重新计算每一个元素的哈希值。")]),t._v(" "),a("p",[t._v("因为HashMap的初始容量是2的次幂，扩容之后的长度是原来的二倍，新的容量也是2的次幂，所以，元素，要么在原位置，要么在原位置再移动2的次幂。")]),t._v(" "),a("p",[t._v("看下这张图，n为table的长度，图 a 表示扩容前的key1和key2两种key确定索引的位置，图 b 表示扩容后key1和key2两种key确定索引位置。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20240314150841288.png",alt:"image-20240314150841288"}})]),t._v(" "),a("p",[t._v("元素在重新计算hash之后，因为n变为2倍，那么n-1的mask范围在高位多1bit(红色)，")]),t._v(" "),a("p",[t._v("因此新的index就会发生这样的变化：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20240314151126749.png",alt:"image-20240314151126749"}})]),t._v(" "),a("p",[t._v("所以在扩容时，"),a("strong",[t._v("只需要看n-1新增的那一位和原来的hash值对应的那一位是0还是1就行了，是0的话索引没变，是1的化变成 原索引+oldCap")])]),t._v(" "),a("p",[t._v("看看如16扩容为32的示意图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/335548153987603.png",alt:"335548153987603"}})]),t._v(" "),a("h2",{attrs:{id:"hashmap-是线程安全的吗-多线程下会有什么问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-是线程安全的吗-多线程下会有什么问题"}},[t._v("#")]),t._v(" HashMap 是线程安全的吗？多线程下会有什么问题？")]),t._v(" "),a("p",[t._v("HashMap不是线程安全的，可能会发生这些问题：")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("多线程下扩容死循环")]),t._v("：在JDK1.7中，HashMap使用头插法插入元素，当多个线程同时进行扩容操作时，可能会导致环形链表的出现，从而形成死循环。为了解决这个问题，JDK1.8中的HashMap改为使用尾插法插入元素，在扩容时保持链表元素原本的顺序，避免了环形链表的问题。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("多线程的put可能导致元素的丢失")]),t._v("：当多个线程同时执行put操作时，如果计算出来的索引位置相同，就会导致后一个key覆盖前一个key，从而导致元素的丢失。这个问题在JDK1.7和JDK1.8中都存在。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("put和get并发时，可能导致get为null")]),t._v("：当一个线程执行put操作导致扩容时，另一个线程同时执行get操作，由于扩容过程中元素迁移的不可见性，可能导致get操作返回null。这个问题在JDK1.7和JDK1.8中都存在。")])])]),t._v(" "),a("h2",{attrs:{id:"有什么办法能解决hashmap线程不安全的问题呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有什么办法能解决hashmap线程不安全的问题呢"}},[t._v("#")]),t._v(" 有什么办法能解决HashMap线程不安全的问题呢？")]),t._v(" "),a("p",[t._v("为了在多线程环境下安全地使用HashMap，可以采取以下措施：")]),t._v(" "),a("ol",[a("li",[t._v("使用线程安全的包装类 ：可以使用 Collections.synchronizedMap() 方法将HashMap包装成线程安全的Map。这个方法返回一个线程安全的Map对象，对该对象的操作会自动进行同步，从而保证线程安全。")]),t._v(" "),a("li",[t._v("使用同步机制 ：可以使用 synchronized 关键字或其他同步机制（如ReentrantLock ）对HashMap进行加锁，确保在多线程环境下的操作是互斥的，从而保证线程安全。不推荐，一般都是用现成的。")]),t._v(" "),a("li",[t._v("使用线程安全的并发容器 ：可以使用 ConcurrentHashMap 代替HashMap。ConcurrentHashMap 是Java提供的线程安全的哈希表实现，通过使用锁分段技术和CAS操作来实现高效的并发性能。但是需要注意的是，如果ConcurrentHashMap 使用不当，也会出现线程安全问题。")])]),t._v(" "),a("h2",{attrs:{id:"hashmap-内部节点是有序的吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-内部节点是有序的吗"}},[t._v("#")]),t._v(" HashMap 内部节点是有序的吗？")]),t._v(" "),a("p",[t._v("HashMap 内部节点的顺序是无序的，这是因为 HashMap 使用的是哈希表的数据结构，它通过哈希函数将键映射到桶（bucket）中，而不是按照插入顺序进行存储。")]),t._v(" "),a("p",[t._v("如果需要有序的存储和遍历元素，可以考虑使用 LinkedHashMap 或者 TreeMap。")]),t._v(" "),a("h2",{attrs:{id:"讲讲-linkedhashmap-怎么实现有序的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲讲-linkedhashmap-怎么实现有序的"}},[t._v("#")]),t._v(" 讲讲 LinkedHashMap 怎么实现有序的？")]),t._v(" "),a("h2",{attrs:{id:"hashmap-和-hashtable的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-和-hashtable的区别"}},[t._v("#")]),t._v(" HashMap 和 HashTable的区别?")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}}),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("HashMap")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("HashTable")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("线程是否安全")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("HashMap是线程不安全的，在多线程并发的环境下，可能会产生"),a("code",[t._v("死锁")]),t._v("等问题")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Hashtable是线程安全的，它的每个方法上都有synchronized 关键字")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("对null的支持")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("key可以为null，但是这样的key只能有一个，因为必须保证key的唯一性；可以有多个 key值对应的value为null")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("key和value都不能为null")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("初始容量大小和每次扩充容量大小")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("HashMap 的初始容量为 16 "),a("br"),t._v("HashMap 的扩容机制是当存储的元素数量超过哈希表大小的负载因子（默认为 0.75）时，会重新分配一个大小是原来的两倍的哈希表，并将原有的元素重新分配到新表中")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Hashtable 的初始容量为 11"),a("br"),t._v("Hashtable 的扩容机制是当存储的元素数量超过"),a("code",[t._v("哈希表大小")]),t._v("的一半时，会重新分配一个大小是原来的两倍的哈希表，并将原有的元素重新分配到新表中")])])])]),t._v(" "),a("h2",{attrs:{id:"hashmap-和-hashset-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-和-hashset-区别"}},[t._v("#")]),t._v(" HashMap 和 HashSet 区别?")]),t._v(" "),a("p",[t._v("如果看过 "),a("code",[t._v("HashSet")]),t._v(" 源码的话就应该知道："),a("code",[t._v("HashSet")]),t._v(" 底层就是基于 "),a("code",[t._v("HashMap")]),t._v(" 实现的。（"),a("code",[t._v("HashSet")]),t._v(" 的源码非常非常少，因为除了 "),a("code",[t._v("clone()")]),t._v("、"),a("code",[t._v("writeObject()")]),t._v("、"),a("code",[t._v("readObject()")]),t._v("是 "),a("code",[t._v("HashSet")]),t._v(" 自己不得不实现之外，其他方法都是直接调用 "),a("code",[t._v("HashMap")]),t._v(" 中的方法。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[a("code",[t._v("HashMap")])]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[a("code",[t._v("HashSet")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("实现了 "),a("code",[t._v("Map")]),t._v(" 接口")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("实现 "),a("code",[t._v("Set")]),t._v(" 接口")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("存储键值对")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("仅存储对象")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("调用 "),a("code",[t._v("put()")]),t._v("向 map 中添加元素")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("调用 "),a("code",[t._v("add()")]),t._v("方法向 "),a("code",[t._v("Set")]),t._v(" 中添加元素")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("HashMap")]),t._v(" 使用键（Key）计算 "),a("code",[t._v("hashcode")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("HashSet")]),t._v(" 使用成员对象来计算 "),a("code",[t._v("hashcode")]),t._v(" 值，对于两个对象来说 "),a("code",[t._v("hashcode")]),t._v(" 可能相同，所以"),a("code",[t._v("equals()")]),t._v("方法用来判断对象的相等性")])])])]),t._v(" "),a("h2",{attrs:{id:"能说一下concurrenthashmap的具体实现吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#能说一下concurrenthashmap的具体实现吗"}},[t._v("#")]),t._v(" 能说一下ConcurrentHashmap的具体实现吗？")]),t._v(" "),a("p",[a("code",[t._v("ConcurrentHashmap")]),t._v("线程安全在jdk1.7版本是基于 "),a("code",[t._v("分段锁")]),t._v(" 实现，在jdk1.8是基于"),a("code",[t._v("CAS+synchronized")]),t._v("实现。")])])}),[],!1,null,null,null);a.default=n.exports}}]);