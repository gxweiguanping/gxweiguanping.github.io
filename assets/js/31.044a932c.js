(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{364:function(a,t,e){"use strict";e.r(t);var v=e(8),s=Object(v.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"垃圾收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集器"}},[a._v("#")]),a._v(" 垃圾收集器")]),a._v(" "),t("h3",{attrs:{id:"gc性能指标"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gc性能指标"}},[a._v("#")]),a._v(" "),t("strong",[a._v("GC性能指标")])]),a._v(" "),t("ul",[t("li",[a._v("吞吐量：运行用户代码的时间占总运行时间的比例（总运行时间 = 程序的运行时间 + 内存回收的时间）")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230821170004741.png",alt:"image-20230821170004741"}})]),a._v(" "),t("ul",[t("li",[a._v("垃圾收集开销：吞吐量的补数，垃圾收集所用时间与总运行时间的比例。")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230821170433178.png",alt:"image-20230821170433178"}})]),a._v(" "),t("ul",[t("li",[t("p",[a._v("暂停时间：执行垃圾收集时，程序的工作线程被暂停的时间。")])]),a._v(" "),t("li",[t("p",[a._v("收集频率：相对于应用程序的执行，收集操作发生的频率。")])]),a._v(" "),t("li",[t("p",[a._v("内存占用：Java堆区所占的内存大小。")])]),a._v(" "),t("li",[t("p",[a._v("快速：一个对象从诞生到被回收所经历的时间。")])])]),a._v(" "),t("p",[a._v("吞吐量、暂停时间、内存占用 这三者共同构成一个"),t("code",[a._v("不可能三角")]),a._v("。三者总体的表现会随着技术进步而越来越好。一款优秀的收集器通常最多同时满足其中的两项。")]),a._v(" "),t("p",[a._v("这三项里，暂停时间的重要性日益凸显。因为随着硬件发展，内存占用多些越来越能容忍，硬件性能的提升也有助于降低收集器运行时对应用程序的影响，即提高了吞吐量。而内存的扩大，对延迟反而带来负面效果。")]),a._v(" "),t("p",[a._v("简单来说，主要抓住两点："),t("code",[a._v("吞吐量")]),a._v("、"),t("code",[a._v("暂停时间")])]),a._v(" "),t("h4",{attrs:{id:"吞吐量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#吞吐量"}},[a._v("#")]),a._v(" "),t("strong",[a._v("吞吐量")])]),a._v(" "),t("blockquote",[t("p",[a._v("吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值。它表示在一段时间内，CPU有多少时间是用于执行实际的用户代码，而不是用于执行垃圾回收操作。具体计算公式为：吞吐量 = 运行用户代码时间 /（运行用户代码时间+垃圾收集时间）。")])]),a._v(" "),t("p",[a._v("假设虚拟机总共运行了100分钟，其中垃圾收集花费了1分钟，那么根据吞吐量的计算公式，吞吐量为 99%。这表示在整个运行过程中，有99%的时间是用于执行用户代码，只有1%的时间用于执行垃圾收集操作。")]),a._v(" "),t("p",[a._v("在高吞吐量优先的情况下，应用程序需要容忍较高的暂停时间，意味着"),t("code",[a._v("在单位时间内，STW的时间最短")]),a._v("。应用程序会"),t("code",[a._v("尽量减少 STW 时间")]),a._v("，以便在单位时间内"),t("code",[a._v("最大程度地执行用户代码")]),a._v("。")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[a._v("200")]),a._v("ms "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("200")]),a._v("ms "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("400")]),a._v("ms "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.4")]),a._v("s\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230821171935622.png",alt:"image-20230821171935622"}})]),a._v(" "),t("h4",{attrs:{id:"暂停时间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#暂停时间"}},[a._v("#")]),a._v(" "),t("strong",[a._v("暂停时间")])]),a._v(" "),t("blockquote",[t("p",[a._v("暂停时间指的是应用程序线程在某个时间段内被暂停，以便垃圾收集（GC）线程可以执行。在这段暂停时间内，应用程序线程处于不活动状态，而GC线程在进行垃圾回收操作。")])]),a._v(" "),t("p",[a._v("假设在一个时间段内，有五次垃圾收集，每次垃圾收集引起的暂停时间分别是0.1秒。这意味着在每次垃圾收集时，应用程序线程会停止运行，垃圾收集线程执行垃圾回收操作。将这五次暂停时间相加，总暂停时间为0.5秒。这是这段时间内应用程序线程停止执行的总时间。")]),a._v(" "),t("p",[a._v("当强调"),t("code",[a._v("暂停时间优先")]),a._v("时，意味着关注将每次停止应用程序线程的时间（STW时间）尽量缩短。以便应用程序线程尽快恢复活动状态。")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),a._v("ms "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),a._v("ms "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),a._v("ms "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),a._v("ms "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),a._v("ms "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("500")]),a._v("ms "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.5")]),a._v("s\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230821173446972.png",alt:"image-20230821173446972"}})]),a._v(" "),t("h4",{attrs:{id:"吞吐量-vs-暂停时间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#吞吐量-vs-暂停时间"}},[a._v("#")]),a._v(" "),t("strong",[a._v("吞吐量 vs 暂停时间")])]),a._v(" "),t("p",[t("strong",[a._v("高吞吐量优势：")]),a._v(" 高吞吐量意味着应用程序能够在单位时间内处理更多的工作，使用户感觉应用程序一直在"),t("code",[a._v("生产性")]),a._v("工作，从而快速执行。这在某些场景下非常有利，用户会感觉应用程序的响应速度很快。")]),a._v(" "),t("p",[t("strong",[a._v("低暂停时间优势：")]),a._v(" 低暂停时间或低延迟意味着应用程序的暂停时间较短，从最终用户的角度来看，无论是由于垃圾收集还是其他原因，应用程序挂起的时间都较短。在交互式应用程序等实时性要求较高的情况下，较低的暂停时间对于保持用户体验至关重要。")]),a._v(" "),t("p",[t("strong",[a._v("竞争关系：")]),a._v(" 高吞吐量和低暂停时间之间存在竞争关系。"),t("code",[a._v("提高吞吐量通常需要降低内存回收的频率")]),a._v("，这会"),t("code",[a._v("导致较长的垃圾收集暂停")]),a._v("。反之，为了"),t("code",[a._v("降低暂停时间")]),a._v("，可能需要"),t("code",[a._v("更频繁地执行内存回收")]),a._v("，但这可能"),t("code",[a._v("降低吞吐量")]),a._v("。")]),a._v(" "),t("p",[t("strong",[a._v("折衷方案：")]),a._v(" 在设计或使用垃圾收集算法时，通常需要在"),t("code",[a._v("高吞吐量")]),a._v("和"),t("code",[a._v("低暂停时间")]),a._v("之间做出折衷。现代的垃圾收集器通常尝试找到这两者之间的平衡，以提供在不同场景下都能够满足性能需求的解决方案。")]),a._v(" "),t("p",[a._v("**现在标准：**在最大吞吐量优先的情况下，降低暂停时间。")]),a._v(" "),t("h3",{attrs:{id:"垃圾收集器分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集器分类"}},[a._v("#")]),a._v(" 垃圾收集器分类")]),a._v(" "),t("h4",{attrs:{id:"按线程数分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#按线程数分"}},[a._v("#")]),a._v(" 按线程数分")]),a._v(" "),t("p",[a._v("可以分为"),t("code",[a._v("串行垃圾回收器")]),a._v("和"),t("code",[a._v("并行垃圾回收器")]),a._v("。")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",[a._v("分类")]),a._v(" "),t("th",[a._v("收集器")])])]),a._v(" "),t("tbody",[t("tr",[t("td",[a._v("串行")]),a._v(" "),t("td",[a._v("Serial收集器")])]),a._v(" "),t("tr",[t("td"),a._v(" "),t("td",[a._v("Serial Old收集器")])]),a._v(" "),t("tr",[t("td",[a._v("并行")]),a._v(" "),t("td",[a._v("ParNew收集器")])]),a._v(" "),t("tr",[t("td"),a._v(" "),t("td",[a._v("Parallel Scavenge收集器")])]),a._v(" "),t("tr",[t("td"),a._v(" "),t("td",[a._v("Parallel Old收集器")])])])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/QQ%E6%88%AA%E5%9B%BE20230821163012.png",alt:"QQ截图20230821163012"}})]),a._v(" "),t("p",[t("strong",[a._v("串行回收")])]),a._v(" "),t("blockquote",[t("p",[a._v("串行回收不仅仅指的是在同一时间段内只"),t("code",[a._v("允许有一个CPU")]),a._v("或"),t("code",[a._v("一条收集线程")]),a._v("用于执行垃圾回收操作。更重要的是强调在它进行垃圾收集时，必须暂停其他所有工作线程，直到它收集结束。")])]),a._v(" "),t("p",[t("strong",[a._v("并行回收")])]),a._v(" "),t("blockquote",[t("p",[a._v("和串行回收相反，并行收集可以运用多个CPU同时执行垃圾回收，因此提升了应用的吞吐量，不过并行回收仍然与串行回收一样，采用独占式，使用了"),t("code",[a._v("Stop-the-World")]),a._v("机制。")])]),a._v(" "),t("h4",{attrs:{id:"按照工作模式分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#按照工作模式分"}},[a._v("#")]),a._v(" 按照工作模式分")]),a._v(" "),t("p",[a._v("可以分为"),t("code",[a._v("并发式垃圾回收器")]),a._v("和"),t("code",[a._v("独占式垃圾回收器")]),a._v("。")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",[a._v("类型")]),a._v(" "),t("th",[a._v("垃圾回收器")])])]),a._v(" "),t("tbody",[t("tr",[t("td",[a._v("并发式垃圾回收")]),a._v(" "),t("td",[a._v("CMS（Concurrent Mark-Sweep）")])]),a._v(" "),t("tr",[t("td"),a._v(" "),t("td",[a._v("G1（Garbage-First）")])]),a._v(" "),t("tr",[t("td",[a._v("独占式垃圾回收")]),a._v(" "),t("td",[a._v("Serial收集器")])]),a._v(" "),t("tr",[t("td"),a._v(" "),t("td",[a._v("Parallel Scavenge收集器")])]),a._v(" "),t("tr",[t("td"),a._v(" "),t("td",[a._v("Serial Old收集器")])])])]),a._v(" "),t("p",[t("strong",[a._v("并发式垃圾回收")])]),a._v(" "),t("blockquote",[t("p",[a._v("这些垃圾收集器在执行垃圾回收时，与应用程序的线程交替运行。")])]),a._v(" "),t("p",[t("strong",[a._v("独占式垃圾回收")])]),a._v(" "),t("blockquote",[t("p",[a._v("独占式垃圾回收器（Stop the world）一旦运行，就"),t("code",[a._v("停止应用程序中的所有用户线程")]),a._v("，直到垃圾回收过程完全结束")])]),a._v(" "),t("h4",{attrs:{id:"按碎片处理方式分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#按碎片处理方式分"}},[a._v("#")]),a._v(" 按碎片处理方式分")]),a._v(" "),t("p",[a._v("可分为"),t("code",[a._v("压缩式垃圾回收器")]),a._v("和"),t("code",[a._v("非压缩式垃圾回收器")]),a._v("。")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",[a._v("类型")]),a._v(" "),t("th",[a._v("垃圾回收器")])])]),a._v(" "),t("tbody",[t("tr",[t("td",[a._v("压缩式垃圾回收")]),a._v(" "),t("td",[a._v("G1（Garbage-First）")])]),a._v(" "),t("tr",[t("td"),a._v(" "),t("td",[a._v("ZGC 收集器")])]),a._v(" "),t("tr",[t("td",[a._v("非压缩式垃圾回收")]),a._v(" "),t("td",[a._v("Serial收集器")])]),a._v(" "),t("tr",[t("td"),a._v(" "),t("td",[a._v("Parallel Scavenge收集器")])]),a._v(" "),t("tr",[t("td"),a._v(" "),t("td",[a._v("Serial Old收集器")])]),a._v(" "),t("tr",[t("td"),a._v(" "),t("td",[a._v("CMS（Concurrent Mark-Sweep）")])])])]),a._v(" "),t("p",[t("strong",[a._v("压缩式垃圾回收")])]),a._v(" "),t("blockquote",[t("p",[a._v("压缩式垃圾回收器会在回收完成后，对存活对象进行压缩整理，消除回收后的碎片")])]),a._v(" "),t("p",[t("strong",[a._v("非压缩式垃圾回收")])]),a._v(" "),t("blockquote",[t("p",[a._v("非压缩式的垃圾回收器在回收完成后，不进行压缩整理")])]),a._v(" "),t("h4",{attrs:{id:"按工作的内存区间分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#按工作的内存区间分"}},[a._v("#")]),a._v(" 按工作的内存区间分")]),a._v(" "),t("p",[a._v("又可分为"),t("code",[a._v("年轻代垃圾回收器")]),a._v("和"),t("code",[a._v("老年代垃圾回收器")]),a._v("。")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",[a._v("型")]),a._v(" "),t("th",[a._v("垃圾回收器")])])]),a._v(" "),t("tbody",[t("tr",[t("td",[a._v("年轻代垃圾回收")]),a._v(" "),t("td",[a._v("Serial收集器")])]),a._v(" "),t("tr",[t("td"),a._v(" "),t("td",[a._v("ParNew收集器")])]),a._v(" "),t("tr",[t("td"),a._v(" "),t("td",[a._v("Parallel Scavenge收集器")])]),a._v(" "),t("tr",[t("td",[a._v("老年代垃圾回收")]),a._v(" "),t("td",[a._v("Serial Old收集器")])]),a._v(" "),t("tr",[t("td"),a._v(" "),t("td",[a._v("Parallel Old收集器")])]),a._v(" "),t("tr",[t("td"),a._v(" "),t("td",[a._v("CMS（Concurrent Mark-Sweep）")])]),a._v(" "),t("tr",[t("td",[a._v("整堆垃圾回收")]),a._v(" "),t("td",[a._v("G1（Garbage-First）")])])])]),a._v(" "),t("h3",{attrs:{id:"不同的垃圾回收器概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不同的垃圾回收器概述"}},[a._v("#")]),a._v(" 不同的垃圾回收器概述")]),a._v(" "),t("h4",{attrs:{id:"垃圾回收器发展史"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器发展史"}},[a._v("#")]),a._v(" 垃圾回收器发展史")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("1999年随JDK1.3.1一起来的是串行方式的"),t("code",[a._v("Serial GC")]),a._v("，它是第一款GC。"),t("code",[a._v("ParNew GC")]),a._v("是Serial收集器的多线程版本")])]),a._v(" "),t("li",[t("p",[a._v("2002年2月26日，"),t("code",[a._v("Parallel GC")]),a._v("和"),t("code",[a._v("Concurrent Mark Sweep GC(简称CMS)")]),a._v("跟随JDK1.4.2一起发布")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("Parallel GC")]),a._v("在JDK6之后成为"),t("code",[a._v("HotSpot默认GC")]),a._v("。")])]),a._v(" "),t("li",[t("p",[a._v("2012年，在JDK1.7u4版本中，"),t("code",[a._v("G1")]),a._v("可用。")])]),a._v(" "),t("li",[t("p",[a._v("2017年，JDK9中"),t("code",[a._v("G1变成默认的垃圾收集器")]),a._v("，以替代"),t("code",[a._v("CMS")]),a._v("。")])]),a._v(" "),t("li",[t("p",[a._v("2018年3月，JDK10中"),t("code",[a._v("G1垃圾回收器")]),a._v("的"),t("code",[a._v("并行完整垃圾回收")]),a._v("，实现并行性来改善最坏情况下的延迟。")])]),a._v(" "),t("li",[t("p",[a._v('2018年9月，JDK11发布。引入Epsilon 垃圾回收器，又被称为 "No-Op(无操作)“ 回收器。同时，引入ZGC：可伸缩的低延迟垃圾回收器（Experimental）。')])]),a._v(" "),t("li",[t("p",[a._v("2019年3月，JDK12发布。增强G1，自动返回未用堆内存给操作系统。同时，引入Shenandoah GC：低停顿时间的GC（Experimental）。")])]),a._v(" "),t("li",[t("p",[a._v("2019年9月，JDK13发布。增强ZGC，自动返回未用堆内存给操作系统。")])]),a._v(" "),t("li",[t("p",[a._v("2020年3月，JDK14发布。删除CMS垃圾回收器。扩展ZGC在macos和Windows上的应用")])])]),a._v(" "),t("h4",{attrs:{id:"_7种经典的垃圾收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7种经典的垃圾收集器"}},[a._v("#")]),a._v(" 7种经典的垃圾收集器")]),a._v(" "),t("p",[a._v("官方手册：https://www.oracle.com/technetwork/java/javase/tech/memorymanagement-whitepaper-1-150020.pdf")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",[a._v("类型")]),a._v(" "),t("th",[a._v("垃圾回收器")])])]),a._v(" "),t("tbody",[t("tr",[t("td",[a._v("串行回收器")]),a._v(" "),t("td",[a._v("Serial")])]),a._v(" "),t("tr",[t("td"),a._v(" "),t("td",[a._v("Serial Old")])]),a._v(" "),t("tr",[t("td"),a._v(" "),t("td")]),a._v(" "),t("tr",[t("td",[a._v("并行回收器")]),a._v(" "),t("td",[a._v("ParNew")])]),a._v(" "),t("tr",[t("td"),a._v(" "),t("td",[a._v("Parallel Scavenge")])]),a._v(" "),t("tr",[t("td"),a._v(" "),t("td",[a._v("Parallel Old")])]),a._v(" "),t("tr",[t("td"),a._v(" "),t("td")]),a._v(" "),t("tr",[t("td",[a._v("并发回收器")]),a._v(" "),t("td",[a._v("CMS（Concurrent Mark-Sweep）")])]),a._v(" "),t("tr",[t("td"),a._v(" "),t("td",[a._v("G1（Garbage-First）")])])])]),a._v(" "),t("h4",{attrs:{id:"_7款经典收集器与垃圾分代之间的关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7款经典收集器与垃圾分代之间的关系"}},[a._v("#")]),a._v(" 7款经典收集器与垃圾分代之间的关系")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/69f86041-810a-4133-abbe-3ab62fa069a3.png",alt:"69f86041-810a-4133-abbe-3ab62fa069a3"}})]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",[a._v("堆区")]),a._v(" "),t("th",[a._v("垃圾回收器")])])]),a._v(" "),t("tbody",[t("tr",[t("td",[a._v("新生代")]),a._v(" "),t("td",[a._v("Serial")])]),a._v(" "),t("tr",[t("td"),a._v(" "),t("td",[a._v("ParNew")])]),a._v(" "),t("tr",[t("td"),a._v(" "),t("td",[a._v("Parallel Scavenge")])]),a._v(" "),t("tr",[t("td"),a._v(" "),t("td")]),a._v(" "),t("tr",[t("td",[a._v("老年代")]),a._v(" "),t("td",[a._v("Serial Old")])]),a._v(" "),t("tr",[t("td"),a._v(" "),t("td",[a._v("Parallel Old")])]),a._v(" "),t("tr",[t("td"),a._v(" "),t("td",[a._v("CMS（Concurrent Mark-Sweep）")])]),a._v(" "),t("tr",[t("td"),a._v(" "),t("td")]),a._v(" "),t("tr",[t("td",[a._v("整堆")]),a._v(" "),t("td",[a._v("G1（Garbage-First）")])])])]),a._v(" "),t("h4",{attrs:{id:"垃圾收集器的组合关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集器的组合关系"}},[a._v("#")]),a._v(" 垃圾收集器的组合关系")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/58edbeca-d4e6-4a60-aad7-d320927b126f.png",alt:"58edbeca-d4e6-4a60-aad7-d320927b126f"}})]),a._v(" "),t("p",[a._v("1、两个收集器间有连线，表明它们可以搭配使用："),t("code",[a._v("Serial/Serial Old")]),a._v("、"),t("code",[a._v("Serial/CMS")]),a._v("、"),t("code",[a._v("ParNew/Serial Old")]),a._v("、"),t("code",[a._v("ParNew/CMS")]),a._v("、"),t("code",[a._v("Parallel Scavenge/Serial Old")]),a._v("、"),t("code",[a._v("Parallel Scavenge/Parallel Old")]),a._v("、"),t("code",[a._v("G1")]),a._v("。")]),a._v(" "),t("p",[a._v("2、其中"),t("code",[a._v("Serial Old")]),a._v("作为"),t("code",[a._v("CMS")]),a._v("出现"),t("code",[a._v("Concurrent Mode Failure")]),a._v("失败的后备预案。")]),a._v(" "),t("p",[a._v("3、（红色虚线）由于维护和兼容性测试的成本，在JDK 8时将"),t("code",[a._v("Serial+CMS")]),a._v("、"),t("code",[a._v("ParNew+Serial Old")]),a._v("这两个组合声明为废弃（JEP173），并在JDK9中完全取消了这些组合的支持（JEP214），即：移除。")]),a._v(" "),t("p",[a._v("4、（绿色虚线）JDK14中：弃用"),t("code",[a._v("Parallel Scavenge")]),a._v("和"),t("code",[a._v("Serialold GC")]),a._v("组合（JEP366）。")]),a._v(" "),t("p",[a._v("5、（浅蓝色虚框）JDK14中：删除"),t("code",[a._v("CMS")]),a._v("垃圾回收器（JEP363）。")]),a._v(" "),t("h4",{attrs:{id:"不同的垃圾收集器概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不同的垃圾收集器概述"}},[a._v("#")]),a._v(" 不同的垃圾收集器概述")]),a._v(" "),t("p",[a._v("为什么要有很多收集器，一个不够吗？因为不同的使用场景和需求导致了多样性的应用需求。这多样性体现在移动端、服务器等不同环境中。因此，为了优化垃圾收集性能，针对不同的应用场景提供不同的垃圾收集器是必要的。")]),a._v(" "),t("p",[a._v("虽然我们会对不同的垃圾收集器进行比较，但目的并不是挑选出一个绝对最好的收集器。没有一种通用、适用于所有场景的完美收集器存在，更没有一种万能的解决方案。因此，"),t("code",[a._v("我们所做的是选择对特定应用最为合适的收集器")]),a._v("，以满足不同环境下的性能和需求。")]),a._v(" "),t("h4",{attrs:{id:"如何查看默认垃圾收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何查看默认垃圾收集器"}},[a._v("#")]),a._v(" 如何查看默认垃圾收集器")]),a._v(" "),t("p",[a._v("1、"),t("code",[a._v("-XX:+PrintCommandLineFlags")]),a._v(" 参数用于在启动 Java 虚拟机时打印命令行标志，其中包括 JVM 使用的各种参数，包括所选用的垃圾收集器。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230822105122128.png",alt:"image-20230822105122128"}})]),a._v(" "),t("p",[t("strong",[a._v("输出以下内容：")])]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("XX")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("InitialHeapSize")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("264449728")]),a._v(" \n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("XX")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MaxHeapSize")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4231195648")]),a._v(" \n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("XX")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PrintCommandLineFlags")]),a._v(" \n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("XX")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UseCompressedClassPointers")]),a._v(" \n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("XX")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UseCompressedOops")]),a._v(" \n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("XX")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UseLargePagesIndividualAllocation")]),a._v(" \n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("XX")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UseParallelGC")]),a._v(" \n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br")])]),t("ul",[t("li",[t("code",[a._v("-XX:InitialHeapSize=264449728")]),a._v("：设置初始堆大小为 264449728 字节（约 252 MB）。这是 Java 堆的初始大小，堆是用于存储对象实例的内存区域。")]),a._v(" "),t("li",[t("code",[a._v("-XX:MaxHeapSize=4231195648")]),a._v("：设置最大堆大小为 4231195648 字节（约 4033 MB）。这是 Java 堆的最大大小，它是堆内存的上限。")]),a._v(" "),t("li",[t("code",[a._v("-XX:+PrintCommandLineFlags")]),a._v("：这个参数会在启动时打印出 Java 虚拟机的命令行标志，包括所有传递给虚拟机的参数。")]),a._v(" "),t("li",[t("code",[a._v("-XX:+UseCompressedClassPointers")]),a._v("：启用压缩的类指针。这个选项允许 JVM 使用更小的指针来表示类的元数据，从而减少堆内存的消耗。")]),a._v(" "),t("li",[t("code",[a._v("-XX:+UseCompressedOops")]),a._v("：启用压缩的普通对象指针。类似于上一个参数，这个选项允许 JVM 使用更小的指针来表示普通对象的引用，以降低堆内存的使用。")]),a._v(" "),t("li",[t("code",[a._v("-XX:-UseLargePagesIndividualAllocation")]),a._v("：禁用大页面分配。大页面是一种内存分配策略，但在某些情况下可能导致性能问题，此选项将其禁用。")]),a._v(" "),t("li",[t("code",[a._v("-XX:+UseParallelGC")]),a._v("：使用并行垃圾收集器。这个选项指示 JVM 使用并行收集器，它会在多个线程上并行执行垃圾回收操作，以提高吞吐量。")])]),a._v(" "),t("p",[a._v("2、使用命令行指令："),t("code",[a._v("jinfo -flag 相关垃圾回收器参数 进程ID")])]),a._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[a._v("注意")]),a._v(" "),t("p",[a._v("先使用"),t("code",[a._v("jps")]),a._v("命令查看对应的进程ID")])]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// UseParallelGC 是并行收集器的一个参数")]),a._v("\njinfo "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("flag "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UseParallelGC")]),a._v(" 进程"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("ID")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230822104934947.png",alt:"image-20230822104934947"}})]),a._v(" "),t("h3",{attrs:{id:"serial回收器-串行回收"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#serial回收器-串行回收"}},[a._v("#")]),a._v(" Serial回收器：串行回收")]),a._v(" "),t("h4",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[a._v("#")]),a._v(" 概述")]),a._v(" "),t("blockquote",[t("p",[a._v("Serial收集器是最基本、历史最悠久的垃圾收集器了。JDK1.3之前回收新生代唯一的选择。")])]),a._v(" "),t("p",[a._v("Serial收集器作为HotSpot中client模式下的默认新生代垃圾收集器。")]),a._v(" "),t("p",[a._v("Serial收集器采用"),t("code",[a._v("复制算法")]),a._v("、"),t("code",[a._v("串行回收")]),a._v("和"),t("code",[a._v("stop-the-World")]),a._v("机制的方式执行内存回收。")]),a._v(" "),t("p",[a._v("除了年轻代之外，Serial收集器还提供用于执行老年代垃圾收集的Serial Old收集器。"),t("code",[a._v('Serial Old收集器同样也采用了串行回收和"Stop the World"机制，只不过内存回收算法使用的是标记-压缩算法。')])]),a._v(" "),t("ul",[t("li",[t("p",[t("code",[a._v("Serial old")]),a._v("是运行在Client模式下默认的"),t("code",[a._v("老年代")]),a._v("的垃圾回收器。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("Serial 0ld")]),a._v("在Server模式下主要有两个用途：")]),a._v(" "),t("ul",[t("li",[a._v("与新生代的Parallel scavenge配合使用")]),a._v(" "),t("li",[a._v("作为老年代CMS收集器的后备垃圾收集方案")])])])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230822113014336.png",alt:"image-20230822113014336"}})]),a._v(" "),t("p",[a._v("这个收集器是一个单线程的收集器，但它的"),t("code",[a._v("单线程")]),a._v("的意义并不仅仅说明它只会"),t("code",[a._v("使用一个CPU或一条收集线程去完成垃圾收集工作")]),a._v("，更重要的是在它进行垃圾收集时，"),t("code",[a._v("必须暂停其他所有的工作线程")]),a._v("，直到它收集结束（Stop The World）。")]),a._v(" "),t("h4",{attrs:{id:"优势"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优势"}},[a._v("#")]),a._v(" 优势")]),a._v(" "),t("p",[t("code",[a._v("简单而高效")]),a._v("（与其他收集器的单线程比），对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。运行在Client模式下的虚拟机是个不错的选择。")]),a._v(" "),t("h4",{attrs:{id:"应用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[a._v("#")]),a._v(" 应用场景")]),a._v(" "),t("p",[a._v("在用户的桌面应用场景中，可用内存一般不大（几十MB至一两百MB），可以在较短时间内完成垃圾收集（几十ms至一百多ms），只要不频繁发生，使用串行回收器是可以接受的。")]),a._v(" "),t("p",[a._v("在HotSpot虚拟机中，使用"),t("code",[a._v("-XX:+UseSerialGC")]),a._v("参数可以指定年轻代和老年代都使用串行收集器。等价于新生代用Serial GC，且老年代用Serial Old GC。")]),a._v(" "),t("h4",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" "),t("strong",[a._v("总结")])]),a._v(" "),t("p",[a._v("这种垃圾收集器我们只需要了解即可，因为现在已经不用串行了。而且在限定单核cpu才可以用。现在的电脑或者服务器很多都是多核。")]),a._v(" "),t("p",[a._v("对于交互较强的应用而言，这种垃圾收集器是不能接受的。一般在Java web应用程序中是不会采用串行垃圾收集器的。")]),a._v(" "),t("h3",{attrs:{id:"parnew回收器-并行回收"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parnew回收器-并行回收"}},[a._v("#")]),a._v(" ParNew回收器：并行回收")]),a._v(" "),t("h4",{attrs:{id:"概述-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述-2"}},[a._v("#")]),a._v(" 概述")]),a._v(" "),t("p",[a._v("如果说Serial GC是年轻代中的单线程垃圾收集器，那么ParNew收集器则是Serial收集器的"),t("code",[a._v("多线程版本")]),a._v("。")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("Par")]),a._v("：是Parallel的缩写")]),a._v(" "),t("li",[t("code",[a._v("New")]),a._v("：只能处理的是新生代")])]),a._v(" "),t("p",[a._v("ParNew 收集器除了采用"),t("code",[a._v("并行回收")]),a._v("的方式执行内存回收外，两款垃圾收集器之间几乎没有任何区别。ParNew收集器在年轻代中同样也是采用"),t("code",[a._v("复制算法")]),a._v("、"),t("code",[a._v("Stop-the-World")]),a._v("机制。")]),a._v(" "),t("p",[a._v("ParNew 是很多JVM运行在Server模式下新生代的默认垃圾收集器。")]),a._v(" "),t("ul",[t("li",[a._v("对于新生代，回收次数频繁，使用并行方式高效。")]),a._v(" "),t("li",[a._v("对于老年代，回收次数少，使用串行方式节省资源。（CPU并行需要切换线程，串行可以省去切换线程的资源）")])]),a._v(" "),t("h4",{attrs:{id:"工作原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工作原理"}},[a._v("#")]),a._v(" 工作原理")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230822115213672.png",alt:"image-20230822115213672"}})]),a._v(" "),t("p",[a._v("由于ParNew收集器是基于并行回收，那么是否可以断定ParNew收集器的回收效率在任何场景下都会比serial收集器更高效❓")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("ParNew 收集器运行在多CPU的环境下，由于可以充分利用多CPU、多核心等物理硬件资源优势，可以更快速地完成垃圾收集，提升程序的吞吐量。")])]),a._v(" "),t("li",[t("p",[a._v("但是在单个CPU的环境下，ParNew收集器不比Serial 收集器更高效。虽然Serial收集器是基于串行回收，但是由于CPU不需要频繁地做任务切换，因此可以有效避免多线程交互过程中产生的一些额外开销。")])])]),a._v(" "),t("p",[a._v("因为除Serial外，目前只有ParNew GC能与CMS收集器配合工作。")]),a._v(" "),t("p",[a._v("在程序中，开发人员可以通过选项"),t("code",[a._v("-XX:+/-UseParNewGC")]),a._v("手动指定使用ParNew收集器执行内存回收任务。它表示年轻代使用并行收集器，不影响老年代。")]),a._v(" "),t("p",[a._v("可以使用"),t("code",[a._v("-XX:ParallelGCThreads")]),a._v("参数来限制垃圾收集的线程数，默认开启和CPU数据相同的线程数。")]),a._v(" "),t("h4",{attrs:{id:"如何设置使用parnew垃圾回收器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何设置使用parnew垃圾回收器"}},[a._v("#")]),a._v(" 如何设置使用ParNew垃圾回收器")]),a._v(" "),t("p",[t("strong",[a._v("代码")])]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n * @author:wgp\n * @create: 2023-08-26 10:48\n * @Description: -XX:+PrintCommandLineFlags -XX:+UseParNewGC\n */")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("GcUseTest")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sleep")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1000000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("InterruptedException")]),a._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("printStackTrace")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br")])]),t("p",[t("strong",[a._v("在jdk8中使用ParNew")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230826111231708.png",alt:"image-20230826111231708"}})]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Java")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HotSpot")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("TM")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("64")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Bit")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Server")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("VM")]),a._v(" warning"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Using")]),a._v(" the "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ParNew")]),a._v(" young collector "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("with")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("the")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Serial")]),a._v(" old collector is deprecated and will likely be removed in a future release\n    \n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("XX")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("InitialHeapSize")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("264449728")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("XX")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MaxHeapSize")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4231195648")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("XX")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PrintCommandLineFlags")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("XX")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UseCompressedClassPointers")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("XX")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UseCompressedOops")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("XX")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UseLargePagesIndividualAllocation")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("XX")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UseParNewGC")]),a._v(" \n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("p",[a._v("Java HotSpot（TM）64位服务器虚拟机警告：不赞成将ParNew年轻收集器与Serial旧收集器一起使用，可能会在将来的版本中删除")]),a._v(" "),t("p",[t("strong",[a._v("在jdk9中使用ParNew")])]),a._v(" "),t("p",[t("img",{attrs:{src:"C:%5CUsers%5Ccgkj0%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230826111020830.png",alt:"image-20230826111020830"}})]),a._v(" "),t("p",[a._v("Java HotSpot（TM）64位服务器虚拟机警告：选项UseParNewGC在9.0版本中已弃用，可能会在将来的版本中删除。")]),a._v(" "),t("p",[a._v("不可能将ParNew年轻收集器与CMS以外的任何收集器相结合。")]),a._v(" "),t("h3",{attrs:{id:"parallel回收器-吞吐量优先"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parallel回收器-吞吐量优先"}},[a._v("#")]),a._v(" Parallel回收器：吞吐量优先")]),a._v(" "),t("h4",{attrs:{id:"概述-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述-3"}},[a._v("#")]),a._v(" 概述")]),a._v(" "),t("blockquote",[t("p",[a._v("HotSpot的年轻代中除了拥有ParNew收集器是基于并行回收的以外，Parallel Scavenge收集器同样也采用了"),t("code",[a._v("复制算法")]),a._v("、"),t("code",[a._v("并行回收")]),a._v("和"),t("code",[a._v("Stop the World")]),a._v("机制。")])]),a._v(" "),t("p",[a._v("那Parallel Scavenge有什么特别之处呢❓")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("和ParNew收集器不同，ParallelScavenge收集器的目标则是达到一个"),t("code",[a._v("可控制的吞吐量")]),a._v("（Throughput），它也被称为吞吐量优先的垃圾收集器。")])]),a._v(" "),t("li",[t("p",[a._v("自适应调节策略也是Parallel Scavenge与ParNew一个重要区别。")])])]),a._v(" "),t("p",[a._v("高吞吐量则可以高效率地利用CPU时间，尽快完成程序的运算任务，主要"),t("code",[a._v("适合在后台运算而不需要太多交互的任务")]),a._v("。因此，常见在服务器环境中使用。例如，那些执行"),t("code",[a._v("批量处理")]),a._v("、"),t("code",[a._v("订单处理")]),a._v("、"),t("code",[a._v("工资支付")]),a._v("、"),t("code",[a._v("科学计算")]),a._v("的应用程序。")]),a._v(" "),t("p",[t("code",[a._v("Parallel")]),a._v(" 收集器在JDK1.6时提供了用于执行老年代垃圾收集的"),t("code",[a._v("Parallel Old")]),a._v("收集器，用来代替老年代的"),t("code",[a._v("Serial Old")]),a._v("收集器。")]),a._v(" "),t("p",[t("code",[a._v("Parallel Old")]),a._v("收集器采用了"),t("code",[a._v("标记-压缩算法")]),a._v("，但同样也是基于"),t("code",[a._v("并行回收")]),a._v("和"),t("code",[a._v("Stop-the-World")]),a._v("机制。")]),a._v(" "),t("h4",{attrs:{id:"工作原理-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工作原理-2"}},[a._v("#")]),a._v(" 工作原理")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230822121418176.png",alt:"image-20230822121418176"}})]),a._v(" "),t("p",[a._v("在程序吞吐量优先的应用场景中，Parallel 收集器和Parallel Old收集器的组合，在Server模式下的内存回收性能很不错。在Java8中，默认是此垃圾收集器。")]),a._v(" "),t("h4",{attrs:{id:"相关参数配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相关参数配置"}},[a._v("#")]),a._v(" "),t("strong",[a._v("相关参数配置")])]),a._v(" "),t("ul",[t("li",[t("p",[t("code",[a._v("-XX:+UseParallelGC")]),a._v(" 手动指定年轻代使用Parallel并行收集器执行内存回收任务。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("-XX:+UseParallelOldGC")]),a._v(" 手动指定老年代都是使用并行回收收集器。")]),a._v(" "),t("ul",[t("li",[a._v("分别适用于新生代和老年代。"),t("code",[a._v("默认JDK8是开启的")]),a._v("。")]),a._v(" "),t("li",[a._v("上面两个参数，默认开启一个，另一个也会被开启。"),t("code",[a._v("（互相激活）")])])])]),a._v(" "),t("li",[t("p",[t("code",[a._v("-XX:ParallelGCThreads")]),a._v(" 设置年轻代并行收集器的线程数。一般地，最好与CPU数量相等，以避免过多的线程数影响垃圾收集性能。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230822121035461.png",alt:"image-20230822121035461"}})])]),a._v(" "),t("li",[t("p",[t("code",[a._v("-XX:MaxGCPauseMillis")]),a._v(" 设置垃圾收集器最大停顿时间（即STW的时间）。单位是毫秒。 ⛔️该参数使用需谨慎。")]),a._v(" "),t("ul",[t("li",[a._v("为了尽可能地把停顿时间控制在MaxGCPauseMills以内，收集器在工作时会调整Java堆大小或者其他一些参数。")]),a._v(" "),t("li",[a._v("对于用户来讲，停顿时间越短体验越好。但是在服务器端，我们注重高并发，整体的吞吐量。所以服务器端适合Parallel，进行控制。")])])]),a._v(" "),t("li",[t("p",[t("code",[a._v("-XX:GCTimeRatio")]),a._v(" 用于设置垃圾回收时间与应用程序执行时间的比率。（1 / （1+N）），"),t("code",[a._v("GCTimeRatio")]),a._v("设置的是N的值。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230821170433178.png",alt:"image-20230821170433178"}})]),a._v(" "),t("ul",[t("li",[a._v("例如，将-XX:GCTimeRatio设置为19，意味着允许的最大垃圾收集时间占总时间的比率为1/(1+19)，即约5%。这意味着在每个总时间段内，垃圾收集时间最多占总时间的5%。换句话说，应用程序执行时间将占总时间的95%。")]),a._v(" "),t("li",[a._v("N取值范围（0, 100）。默认情况下，-XX:GCTimeRatio的值为99，即允许的最大垃圾收集时间占总时间的比率为1/(1+99)，即约1%。这意味着在每个总时间段内，垃圾收集时间最多占总时间的1%。应用程序执行时间将占总时间的99%。")]),a._v(" "),t("li",[a._v("与前一个"),t("code",[a._v("-XX:MaxGCPauseMillis")]),a._v("参数有一定矛盾性。暂停时间越长，Radio参数就容易超过设定的比例。")])])]),a._v(" "),t("li",[t("p",[t("code",[a._v("-XX:+UseAdaptivesizePolicy")]),a._v(" 设置Parallel Scavenge收集器具有"),t("code",[a._v("自适应调节策略")])]),a._v(" "),t("ul",[t("li",[a._v("在这种模式下，年轻代的大小、Eden和Survivor的比例、晋升老年代的对象年龄等参数会被自动调整，已达到在堆大小、吞吐量和停顿时间之间的平衡点。")]),a._v(" "),t("li",[a._v("在手动调优比较困难的场合，可以直接使用这种自适应的方式，仅指定虚拟机的最大堆、目标的吞吐量（"),t("code",[a._v("GCTimeRatio")]),a._v("）和停顿时间（"),t("code",[a._v("MaxGCPauseMills")]),a._v("），让虚拟机自己完成调优工作。")])])])]),a._v(" "),t("h3",{attrs:{id:"cms回收器-低延迟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cms回收器-低延迟"}},[a._v("#")]),a._v(" CMS回收器：低延迟")]),a._v(" "),t("h4",{attrs:{id:"概述-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述-4"}},[a._v("#")]),a._v(" 概述")]),a._v(" "),t("p",[a._v("在JDK1.5时期，Hotspot推出了一款在"),t("code",[a._v("强交互应用")]),a._v("中几乎可认为有划时代意义的垃圾收集器：CMS（Concurrent-Mark-Sweep）收集器，"),t("code",[a._v("这款收集器是HotSpot虚拟机中第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程同时工作。")])]),a._v(" "),t("p",[a._v("CMS收集器的关注点是"),t("code",[a._v("尽可能缩短垃圾收集时用户线程的停顿时间")]),a._v("。停顿时间越短（低延迟）就越适合与用户交互的程序，良好的响应速度能提升用户体验。")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("目前很大一部分的Java应用集中在互联网站或者B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。")]),a._v("CMS收集器就非常符合这类应用的需求。")]),a._v(" "),t("li",[a._v("CMS的垃圾收集算法采用"),t("code",[a._v("标记-清除算法")]),a._v("，并且也会"),t("code",[a._v("Stop-the-World")]),a._v("。")])]),a._v(" "),t("p",[a._v("💔不幸的是，CMS作为老年代的收集器，却无法与JDK1.4.0中已经存在的新生代收集器Parallel Scavenge配合工作，原因是这两者的底层框架是不一样的。所以在JDK1.5中使用CMS来收集老年代的时候，新生代只能选择ParNew或者Serial收集器中的一个。")]),a._v(" "),t("h4",{attrs:{id:"工作原理-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工作原理-3"}},[a._v("#")]),a._v(" 工作原理")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230826124610616.png",alt:"image-20230826124610616"}})]),a._v(" "),t("h4",{attrs:{id:"初始标记阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#初始标记阶段"}},[a._v("#")]),a._v(" 初始标记阶段")]),a._v(" "),t("p",[a._v("CMS整个过程比之前的收集器要复杂，整个过程分为4个主要阶段，即"),t("code",[a._v("初始标记阶段")]),a._v("、"),t("code",[a._v("并发标记阶段")]),a._v("、"),t("code",[a._v("重新标记阶段")]),a._v("和"),t("code",[a._v("并发清除阶段")]),a._v("。")]),a._v(" "),t("p",[a._v("🤝在下面的图中，有这样一个约定：")]),a._v(" "),t("ul",[t("li",[a._v("白色：表示对象尚未被垃圾收集器访问过。显然在可达性分析刚刚开始的阶段，所有的对象都是白色的，若在分析结束的阶段，仍然是白色的对象，即代表不可达。")]),a._v(" "),t("li",[a._v("黑色：表示对象已经被垃圾收集器访问过，且这个对象的所有引用都已经扫描过。黑色的对象代表已经扫描过，它是安全存活的，如果有其他对象引用指向了黑色对象，无须重新扫描一遍。黑色对象不可能直接（不经过灰色对象）指向某个白色对象")]),a._v(" "),t("li",[a._v("灰色：表示对象已经被垃圾收集器访问过，但这个对象上至少存在一个引用还没有被扫描过。")])]),a._v(" "),t("p",[t("strong",[a._v("初始标记")]),a._v("（"),t("code",[a._v("Initial-Mark")]),a._v("）阶段：在这个阶段中，程序中所有的工作线程都将会因为"),t("code",[a._v("Stop-the-World")]),a._v("机制而出现短暂的暂停，这个阶段的主要任务"),t("code",[a._v("仅仅只是标记出GCRoots能直接关联到的对象")]),a._v("，这个"),t("code",[a._v("GC Roots")]),a._v(" 仅仅是老年代的 "),t("code",[a._v("GC Roots")]),a._v(" 。一旦标记完成之后就会恢复之前被暂停的所有应用线程。同时初始标记不用去解决跨代引用（新生代引用老年代）问题，这个问题需要留在 "),t("strong",[a._v("remark")]),a._v(" 阶段去解决。")]),a._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[a._v("注意")]),a._v(" "),t("p",[t("code",[a._v("引用是有向的")]),a._v("，对象只有被黑色对象引用才能存活，否则，如果没有黑色对象引用它，它再如何引用其他对象都是会消亡的")]),a._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[a._v("注意")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230826173902591.png",alt:"image-20230826173902591"}})]),a._v(" "),t("p",[a._v("A 对象作为跨代引用对象不会在"),t("strong",[a._v("初始标记")]),a._v("阶段进行标记，在老年代直接和 "),t("code",[a._v("GC Roots")]),a._v(" 关联的对象引用会被压入标记栈（"),t("strong",[a._v("marking stack")]),a._v("）。")]),a._v(" "),t("h4",{attrs:{id:"并发标记阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并发标记阶段"}},[a._v("#")]),a._v(" 并发标记阶段")]),a._v(" "),t("p",[t("strong",[a._v("并发标记")]),a._v("（"),t("code",[a._v("Concurrent-Mark")]),a._v("）阶段："),t("strong",[a._v("concurrent-mark")]),a._v(" 阶段不需要 "),t("code",[a._v("Stop The World")]),a._v("，从GC Roots的"),t("code",[a._v("直接关联对象开始遍历整个对象图的过程")]),a._v("，这个过程"),t("code",[a._v("耗时较长")]),a._v("但是"),t("code",[a._v("不需要停顿用户线程")]),a._v("，可以与垃圾收集线程一起并发运行。具体做法弹出标记栈记录的对象引用，将本对象引用指向的其他对象引用压入标记栈等待被标记，同时标记本对象引用为存活对象。同时整个过程应用线程也在不断更改引用，新创建对象等。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230826173709948.png",alt:"image-20230826173709948"}})]),a._v(" "),t("ul",[t("li",[a._v("A 对象引用：在initial-mark 阶段时，跨代引用的对象会在 remark 阶段进行标记")]),a._v(" "),t("li",[a._v("B 对象引用：B 对象是在 concurrent-sweep 阶段，触发YGC存活到老年代对象，或者是直接分配在老年代的大对象，B 对象被 GC Roots 直接关联。这部分对象会在 remark 阶段进行标记")]),a._v(" "),t("li",[a._v("C 对象引用：C 对象也是在 concurrent-mark 阶段进入到老年代的对象，这部分标记和 A 对象一样，属于跨代引用，会在 remark 阶段进行标记。")]),a._v(" "),t("li",[a._v("F 对象引用：F 对象是在引用树被扫描过程中，发送了"),t("code",[a._v("引用变更")]),a._v("。在遍历标记 D 对象的时候，它还没有引用 F 对象，引用树继续往下遍历标记，当遍历到 E 对象的时候，E 断开引用 F 对象，转而 F 对象被 D 对象引用，导致 F 对象漏标。怎么解决这个问题呢？"),t("strong",[a._v("CMS")]),a._v(" 采用了"),t("code",[a._v("增量更新（Incremental Update）方法")]),a._v("。")]),a._v(" "),t("li",[a._v("1、2对象由于不是被黑色引用，所以1、2对象是会消亡的。")])]),a._v(" "),t("p",[a._v("🔍我们重点分析虚线部分的对象标记过程？")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/20230826173414.png",alt:"20230826173414"}})]),a._v(" "),t("p",[a._v("Wilson于1994年在理论上证明了，当且仅当以下两个条件同时满足时，会产生"),t("code",[a._v("对象消失")]),a._v("的问题，即原本应该是黑色的对象被误标为白色")]),a._v(" "),t("ul",[t("li",[a._v("赋值器插入了一条或多条从黑色对象到白色对象的新引用。")]),a._v(" "),t("li",[a._v("赋值器删除了全部从灰色对象到该白色对象的直接或间接引用。")])]),a._v(" "),t("p",[t("code",[a._v("赋值器是负责将新的引用插入到对象中，并删除不再需要的引用。")])]),a._v(" "),t("p",[a._v("因此，我们要解决并发扫描时的对象消失问题，只需破坏这两个条件的任意一个即可。由此分别产生了两种解决方案：增量更新（Incremental Update）和原始快照（Snapshot At The Beginning，SATB）。")]),a._v(" "),t("p",[t("strong",[a._v("增量更新")])]),a._v(" "),t("p",[a._v("增量更新要破坏的是第一个条件，当黑色对象插入新的指向白色对象的引用关系时，就将这个新插入的引用记录下来，等并发扫描结束之后，再将这些记录过的引用关系中的黑色对象为根，重新扫描一次。这可以简化理解为，黑色对象一旦新插入了指向白色对象的引用之后，它就变回灰色对象了。")]),a._v(" "),t("p",[t("strong",[a._v("原始快照")])]),a._v(" "),t("p",[a._v("原始快照要破坏的是第二个条件，当灰色对象要删除指向白色对象的引用关系时，就将这个要删除的引用记录下来，在并发扫描结束之后，再将这些记录过的引用关系中的灰色对象为根，重新扫描一次。这也可以简化理解为，无论引用关系删除与否，都会按照刚刚开始扫描那一刻的对象图快照来进行搜索。")]),a._v(" "),t("h4",{attrs:{id:"重新标记阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重新标记阶段"}},[a._v("#")]),a._v(" 重新标记阶段")]),a._v(" "),t("p",[t("strong",[a._v("重新标记")]),a._v("（"),t("code",[a._v("Remark")]),a._v("）阶段：由于在并发标记阶段中，程序的工作线程会和垃圾收集线程同时运行或者交叉运行，因此"),t("code",[a._v("为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录（导致漏标、少标的对象）")]),a._v("，这个阶段的"),t("code",[a._v("Stop-the-World")]),a._v("停顿时间通常会比初始标记阶段稍长一些，但也远比并发标记阶段的时间短。")]),a._v(" "),t("blockquote",[t("p",[a._v("就是上面的A、B、C、F类型对象")])]),a._v(" "),t("ul",[t("li",[t("p",[a._v("GC Roots（老年代）：解决 B 类对象问题，在并发阶段，新晋老年代且和 GC Roots 直接相连的对象，它会基于整个对象引用树遍历下去")]),a._v(" "),t("blockquote",[t("p",[a._v("注意，与 GC Roots 直接相连的对象，如果在并发标记阶段已经被标记过了，则不会继续基于对象引用树遍历下去")])])]),a._v(" "),t("li",[t("p",[a._v("新生代：解决 A、C 类对象问题。新生代跨代引用老年代问题通过扫描新生代来解决。")])]),a._v(" "),t("li",[t("p",[a._v("card table + mod-union table：解决 F 类对象问题。通过扫描/标记 dirty card 里对象，来解决并发标记阶段引用变更问题")])]),a._v(" "),t("li",[t("p",[a._v("CMS 在这个阶段任务还是比较重的，特别是在新生代比较大的情况下。")])]),a._v(" "),t("li",[t("p",[a._v("CMS算法中提供了一个参数：-XX:+CMSScavengeBeforeRemark，默认并没有开启，如果开启该参数，在执行 remark 阶段之前，会强制触发一次 YGC，可以减少新生代对象的遍历时间。")])])]),a._v(" "),t("h4",{attrs:{id:"并发清除阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并发清除阶段"}},[a._v("#")]),a._v(" 并发清除阶段")]),a._v(" "),t("p",[t("strong",[a._v("并发清除")]),a._v("（"),t("code",[a._v("Concurrent-Sweep")]),a._v("）阶段：此阶段"),t("code",[a._v("清理删除掉标记阶段判断的已经死亡的对象，释放内存空间")]),a._v("。由于不需要移动存活对象，所以这个阶段也是可以与用户线程同时并发的。")]),a._v(" "),t("hr"),a._v(" "),t("p",[a._v("尽管CMS收集器采用的是并发回收（非独占式），但是在其"),t("code",[a._v("初始化标记和再次标记这两个阶段中仍然需要执行")]),a._v("Stop-the-World"),t("code",[a._v("机制")]),a._v("暂停程序中的工作线程，不过暂停时间并不会太长，因此可以说明目前所有的垃圾收集器都做不到完全不需要“"),t("code",[a._v("top-the-World")]),a._v("，只是尽可能地缩短暂停时间。")]),a._v(" "),t("p",[t("code",[a._v("由于最耗费时间的并发标记与并发清除阶段都不需要暂停工作，所以整体的回收是低停顿的。")])]),a._v(" "),t("p",[a._v("另外，由于在垃圾收集阶段用户线程没有中断，所以在"),t("code",[a._v("CMS回收过程中，还应该确保应用程序用户线程有足够的内存可用")]),a._v("。因此，CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，而是当堆内存使用率达到某一阈值时，便开始进行回收，以确保应用程序在CMS工作过程中依然有足够的空间支持应用程序运行。要是CMS运行期间预留的内存无法满足程序需要，就会出现一次"),t("code",[a._v("Concurrent Mode Failure")]),a._v("失败，这时虚拟机将启动后备预案：临时启用Serial Old收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。")]),a._v(" "),t("p",[a._v("CMS收集器的垃圾收集算法采用的是"),t("code",[a._v("标记清除算法")]),a._v("，这意味着每次执行完内存回收后，由于被执行内存回收的无用对象所占用的内存空间极有可能是不连续的一些内存块，不可避免地将会"),t("code",[a._v("产生一些内存碎片")]),a._v("。那么CMS在为新对象分配内存空间时，将无法使用"),t("code",[a._v("指针碰撞（Bump the Pointer）技术")]),a._v("，而只能够选择"),t("code",[a._v("空闲列表（Free List）执行内存分配")]),a._v("。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230826133804626.png",alt:""}})]),a._v(" "),t("p",[t("strong",[a._v("❓在这里可能有的同学会觉得既然Mark Sweep会造成内存碎片，那么为什么不把算法换成Mark Compact呢")])]),a._v(" "),t("p",[a._v("使用Mark Compact算法的确可以解决内存碎片的问题，但它也存在一些缺点。首先，Mark Compact算法需要在压缩阶段将所有活动对象移动到一端，这可能会导致较大的内存移动开销。其次，由于需要移动对象，Mark Compact算法可能会导致较长的垃圾回收停顿时间，影响程序的响应性能。")]),a._v(" "),t("p",[a._v("答案其实很简单，因为当"),t("code",[a._v("并发清理")]),a._v("的时候，用Mark Compact整理内存的话，原来的用户线程使用的内存还怎么用呢？要保证用户线程能继续执行，前提的它运行的资源不受影响，如果这时候使用Mark Compact整理内存，那么对象的内存地址就发生变化，导致用户线程所使用到的对象受到影响。Mark Compact算法适合在"),t("code",[a._v("Stop the World")]),a._v("这种场景下使用。")]),a._v(" "),t("h4",{attrs:{id:"优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[a._v("#")]),a._v(" 优点")]),a._v(" "),t("p",[t("code",[a._v("并发收集")]),a._v("：CMS收集器在进行垃圾回收时，尽可能减少对用户线程的停顿时间，使得应用程序的响应速度更快。")]),a._v(" "),t("p",[t("code",[a._v("分步处理")]),a._v("：CMS收集器采用分步处理的方式，将垃圾回收过程分为多个阶段，可以与用户线程交替执行，减少对用户程序的影响。")]),a._v(" "),t("p",[t("code",[a._v("低延迟")]),a._v("：由于CMS收集器的并发特性，它可以在垃圾回收的同时，允许应用程序继续执行，从而减少了停顿时间，提高了系统的响应性能。")]),a._v(" "),t("h4",{attrs:{id:"弊端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#弊端"}},[a._v("#")]),a._v(" 弊端")]),a._v(" "),t("p",[t("code",[a._v("CPU敏感")]),a._v("：CMS收集器对处理器资源非常敏感。在并发阶段，虽然不会导致用户线程停顿，但会占用一部分线程（或处理器的计算能力），导致应用程序变慢，降低总吞吐量。特别是在处理器核心数量不足四个的情况下，可能会导致用户程序的执行速度大幅降低。")]),a._v(" "),t("p",[t("code",[a._v("内存碎片")]),a._v("：CMS收集器无法进行整理内存，只能进行标记和清理操作。这可能导致内存碎片的产生，使得内存空间不连续，影响内存的利用效率。")]),a._v(" "),t("p",[t("code",[a._v("浮动垃圾")]),a._v("：由于CMS收集器无法处理浮动垃圾（Floating Garbage），在并发标记和清理阶段，用户线程仍在继续运行，"),t("code",[a._v("用户线程可能会产生新的垃圾对象")]),a._v("。这些垃圾对象无法在当前收集中处理，只能留待下一次垃圾收集时清理，增加了垃圾回收的负担。")]),a._v(" "),t("p",[t("code",[a._v("并发失败")]),a._v("：CMS收集器在运行期间需要预留一部分内存空间给用户线程使用，以保证用户线程的正常运行。如果预留的内存无法满足程序分配新对象的需求，就会出现并发失败（Concurrent Mode Failure），此时虚拟机会启动后备预案，冻结用户线程的执行，临时启用Serial Old收集器进行老年代的垃圾收集，导致较长的停顿时间。")]),a._v(" "),t("h4",{attrs:{id:"参数设置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参数设置"}},[a._v("#")]),a._v(" 参数设置")]),a._v(" "),t("ul",[t("li",[t("p",[t("code",[a._v("-XX:+UseConcMarkSweepGC")]),a._v("手动指定使用CMS收集器执行内存回收任务。\n开启该参数后会自动将"),t("code",[a._v("-xx:+UseParNewGC")]),a._v("打开。即：ParNew（Young区用）+CMS（Old区用）+ Serial Old的组合。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("-XX:CMSInitiatingOccupanyFraction")]),a._v(" 设置堆内存使用率的阈值，一旦达到该阈值，便开始进行回收。")])]),a._v(" "),t("li",[t("ul",[t("li",[a._v("JDK5及以前版本的默认值为68，即当老年代的空间使用率达到68%时，会执行一次CMS回收。JDK6及以上版本默认值为92%。")])])]),a._v(" "),t("li",[t("ul",[t("li",[a._v("如果内存增长缓慢，则可以设置一个稍大的值，大的阀值可以有效降低CMS的触发频率，减少老年代回收的次数可以较为明显地改善应用程序性能。反之，如果应用程序内存使用率增长很快，则应该降低这个阈值，以避免频繁触发老年代串行收集器。因此通过该选项便可以有效降低Ful1Gc的执行次数。")])])]),a._v(" "),t("li",[t("p",[t("code",[a._v("-XX:+UseCMSCompactAtFullCollection")]),a._v(" 用于指定在执行完Full GC后对内存空间进行压缩整理，以此避免内存碎片的产生。不过由于内存压缩整理过程无法并发执行，所带来的问题就是停顿时间变得更长了。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("-XX:CMSFullGCsBeforeCompaction")]),a._v(" 设置在执行多少次Full GC后对内存空间进行压缩整理。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("-XX:ParallelcMSThreads")]),a._v(" 设置CMS的线程数量。")])]),a._v(" "),t("li",[t("ul",[t("li",[a._v("CMS默认启动的线程数是"),t("code",[a._v("（ ParallelGCThreads + 3 ）/ 4")]),a._v("，ParallelGCThreads是年轻代并行收集器的线程数。当CPU资源比较紧张时，受到CMS收集器线程的影响，应用程序的性能在垃圾回收阶段可能会非常糟糕。")])])])]),a._v(" "),t("h4",{attrs:{id:"jdk后续版本中cms的变化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk后续版本中cms的变化"}},[a._v("#")]),a._v(" JDK后续版本中CMS的变化")]),a._v(" "),t("p",[a._v("JDK9新特性：CMS被标记为Deprecate了（JEP291）")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("如果对JDK9及以上版本的HotSpot虚拟机使用参数"),t("code",[a._v("-XX: +UseConcMarkSweepGC")]),a._v("来开启CMS收集器的话，用户会收到一个警告信息，提示CMS未来将会被废弃。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230826143956965.png",alt:"image-20230826143956965"}})])])]),a._v(" "),t("p",[a._v("JDK14新特性：删除CMS垃圾回收器（JEP363）")]),a._v(" "),t("ul",[t("li",[a._v("移除了CMS垃圾收集器，如果在JDK14中使用 "),t("code",[a._v("-XX:+UseConcMarkSweepGC")]),a._v("的话，JVM不会报错，只是给出一个warning信息，但是不会exit。JVM会自动回退以默认GC方式启动JVM")])]),a._v(" "),t("h3",{attrs:{id:"g1回收器-区域化分代式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#g1回收器-区域化分代式"}},[a._v("#")]),a._v(" G1回收器：区域化分代式")]),a._v(" "),t("h4",{attrs:{id:"g1概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#g1概述"}},[a._v("#")]),a._v(" G1概述")]),a._v(" "),t("blockquote",[t("p",[a._v("GarbageFirst（简称G1）收集器是垃圾收集器技术发展历史上的里程碑式的成果，它开创了收集器面向局部收集的设计思路和基于Region的内存布局形式。")])]),a._v(" "),t("p",[a._v("G1（Garbage-First）是一款面向服务端应用的垃圾收集器，主要针对配备多核CPU及大容量内存的机器，以极高概率满足GC停顿时间的同时，还兼具高吞吐量的性能特征。")]),a._v(" "),t("p",[a._v("官方给G1设定的目标是在延迟可控的情况下获得尽可能高的吞吐量，所以才担当起"),t("code",[a._v("全功能收集器")]),a._v("的重任与期望。")]),a._v(" "),t("h4",{attrs:{id:"g1发展历程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#g1发展历程"}},[a._v("#")]),a._v(" G1发展历程")]),a._v(" "),t("ol",[t("li",[t("strong",[a._v("提出概念：")]),a._v(" G1垃圾回收器的概念最早由Sun Microsystems的垃圾回收专家Tony Printezis提出。他在一篇研究论文中提出了一种新型的垃圾回收器，旨在解决CMS垃圾回收器在处理大堆内存时的一些性能和可预测性问题。")]),a._v(" "),t("li",[t("strong",[a._v("原型实现：")]),a._v(" Sun Microsystems开始着手实现G1垃圾回收器的原型。这个早期版本用于验证G1的设计理念和可行性。")]),a._v(" "),t("li",[t("strong",[a._v("JDK6 Update 14：")]),a._v(" G1垃圾回收器"),t("code",[a._v("首次发布在JDK6 Update 14")]),a._v("中。然而，它仍然被标记为实验性选项，并未默认启用。")]),a._v(" "),t("li",[a._v("**JDK7 Update 4：**随着JDK7 Update4的发布，移除了"),t("code",[a._v("Experimental")]),a._v("的标识。")]),a._v(" "),t("li",[a._v("**JDK8 Update 40：**G1提供并发的类卸载的支持，补全了其计划功能的最后一块拼图。")]),a._v(" "),t("li",[a._v("**JDK9：**取代Parallel Scavenge + Parallel Old组合，成为服务端模式下的默认垃圾收集器，而CMS则沦落至被声明为不推荐使用（Deprecate）的收集器。")])]),a._v(" "),t("h4",{attrs:{id:"为什么叫g1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么叫g1"}},[a._v("#")]),a._v(" 为什么叫G1")]),a._v(" "),t("ul",[t("li",[a._v("因为G1是一个并行回收器，它把堆内存分割为很多不相关的区域（Region）（物理上不连续的）。使用不同的Region（区域）来表示Eden、幸存者0区，幸存者1区，老年代等。")]),a._v(" "),t("li",[a._v("G1 GC有计划地避免在整个Java堆中进行全区域的垃圾收集。"),t("code",[a._v("G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值）")]),a._v("，在后台维护一个优先列表，每次根据允许的收集时间，"),t("code",[a._v("优先回收价值最大的Region")]),a._v("。")]),a._v(" "),t("li",[a._v("由于这种方式的侧重点在于回收垃圾最大量的区间（Region），所以我们给G1一个名字：垃圾优先（Garbage First）。")])]),a._v(" "),t("h4",{attrs:{id:"g1回收器的特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#g1回收器的特点"}},[a._v("#")]),a._v(" G1回收器的特点")]),a._v(" "),t("p",[a._v("与其他GC收集器相比，G1使用了全新的分区算法，其特点如下所示：")]),a._v(" "),t("h5",{attrs:{id:"并行与并发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并行与并发"}},[a._v("#")]),a._v(" "),t("strong",[a._v("并行与并发")])]),a._v(" "),t("ul",[t("li",[t("p",[a._v("并行性：G1在回收期间，可以有多个GC线程同时工作，有效利用多核计算能力。此时用户线程STW。")])]),a._v(" "),t("li",[t("p",[a._v("并发性：G1拥有与应用程序交替执行的能力，部分工作可以和应用程序同时执行，因此，一般来说，不会在整个回收阶段发生完全阻塞应用程序的情况。")])])]),a._v(" "),t("h5",{attrs:{id:"分代收集"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分代收集"}},[a._v("#")]),a._v(" "),t("strong",[a._v("分代收集")])]),a._v(" "),t("ul",[t("li",[t("p",[a._v("从分代上看，"),t("code",[a._v("G1依然属于分代型垃圾回收器")]),a._v("，它会区分年轻代和老年代，年轻代依然有Eden区和Survivor区。但从堆的结构上看，它不要求整个Eden区、年轻代或者老年代都是连续的，也不再坚持固定大小和固定数量。")])]),a._v(" "),t("li",[t("p",[a._v("将"),t("code",[a._v("堆空间分为若干个区域（Region）")]),a._v("，这些区域中包含了"),t("code",[a._v("逻辑上的年轻代和老年代")]),a._v("，每一个Region都可以根据需要，扮演新生代的Eden空间、Survivor空间，或者老年代空间。")])]),a._v(" "),t("li",[t("p",[a._v("和之前的各类回收器不同，它同时"),t("code",[a._v("兼顾年轻代和老年代")]),a._v("。对比其他回收器，或者工作在年轻代，或者工作在老年代；")])])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230828210956697.png",alt:"image-20230828210956697"}})]),a._v(" "),t("h5",{attrs:{id:"空间整合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#空间整合"}},[a._v("#")]),a._v(" 空间整合")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("CMS："),t("code",[a._v("标记-清除")]),a._v("算法、内存碎片、若干次GG后就进行一次碎片整理。")])]),a._v(" "),t("li",[t("p",[a._v("G1将内存划分为一个个的Region。内存的回收是以Region作为基本单位的。"),t("code",[a._v("Region之间是复制算法")]),a._v("，但整体上实际可看作是"),t("code",[a._v("标记-压缩（Mark-Compact）算法")]),a._v("，两种算法都可以避免内存碎片。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。尤其是当Java堆非常大的时候，G1的优势更加明显。")])])]),a._v(" "),t("h5",{attrs:{id:"可预测的停顿时间模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可预测的停顿时间模型"}},[a._v("#")]),a._v(" 可预测的停顿时间模型")]),a._v(" "),t("p",[a._v("这是G1相对于CMS的另一大优势，G1除了追求低停顿外，还能建立可预测的停顿时间模型")]),a._v(" "),t("p",[a._v("能够支持指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间大概率不超过N毫秒这样的目标，这几乎已经是符合了实时Java（RTSJ）中软实时垃圾收集器的特征。")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("由于分区的原因，G1可以只选取部分区域进行内存回收，这样缩小了回收的范围，因此对于全局停顿情况的发生也能得到较好的控制。")])]),a._v(" "),t("li",[t("p",[a._v("G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region。保证了G1收集器在有限的时间内可以获取尽可能高的收集效率。")])]),a._v(" "),t("li",[t("p",[a._v("相比于CMS GC，G1未必能做到CMS在最好情况下的延时停顿，但是最差情况要好很多。")])])]),a._v(" "),t("h4",{attrs:{id:"g1回收器的缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#g1回收器的缺点"}},[a._v("#")]),a._v(" G1回收器的缺点")]),a._v(" "),t("ol",[t("li",[a._v("内存占用：G1垃圾收集器需要维护额外的数据结构来管理堆内存，这会导致一定的内存占用。相比于其他垃圾收集器，G1垃圾收集器需要更多的堆内存。")]),a._v(" "),t("li",[a._v("在小内存应用上CMS的表现大概率会优于G1，而G1在大内存应用上则发挥其优势。平衡点在堆大小在6-8GB之间。")])]),a._v(" "),t("h4",{attrs:{id:"g1回收器的参数设置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#g1回收器的参数设置"}},[a._v("#")]),a._v(" G1回收器的参数设置")]),a._v(" "),t("ul",[t("li",[t("p",[t("code",[a._v("-XX:+UseG1GC")]),a._v("：手动指定使用G1垃圾收集器执行内存回收任务")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("-XX:G1HeapRegionSize")]),a._v(" 设置每个Region的大小。值是2的幂，范围是1MB到32MB之间，目标是根据最小的Java堆大小划分出约2048个区域。默认是堆内存大小的1/2000。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("-XX:MaxGCPauseMillis")]),a._v(" 设置期望达到的最大GC停顿时间指标（JVM会尽力实现，但不保证达到）。默认值是200ms（人的平均反应速度）")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("-XX:+ParallelGCThread")]),a._v(" 设置并行GC线程数的值。最多设置为8（上面说过Parallel回收器的线程计算公式，当CPU_Count > 8时，ParallelGCThreads 也会大于8）")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("-XX:ConcGCThreads")]),a._v(" 设置并发标记的线程数。将n设置为并行垃圾回收线程数（ParallelGCThreads）的1/4左右。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("-XX:InitiatingHeapOccupancyPercent")]),a._v(" 设置触发并发GC周期的Java堆占用率阈值。超过此值，就触发GC。默认值是45。")])])]),a._v(" "),t("h4",{attrs:{id:"g1收集器的常见操作步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#g1收集器的常见操作步骤"}},[a._v("#")]),a._v(" G1收集器的常见操作步骤")]),a._v(" "),t("p",[a._v("G1的设计原则就是简化JVM性能调优，开发人员只需要简单的三步即可完成调优：")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("第一步：开启G1垃圾收集器")])]),a._v(" "),t("li",[t("p",[a._v("第二步：设置堆的最大内存")])]),a._v(" "),t("li",[t("p",[a._v("第三步：设置最大的停顿时间")])])]),a._v(" "),t("p",[a._v("G1中提供了三种垃圾回收模式：Young GC、Mixed GC和Full GC，在不同的条件下被触发。")]),a._v(" "),t("h4",{attrs:{id:"分区region-化整为零"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分区region-化整为零"}},[a._v("#")]),a._v(" 分区Region-化整为零")]),a._v(" "),t("p",[a._v("使用G1收集器时，它将整个Java堆划分成约2048个大小相同的独立Region块，每个Region块大小根据堆空间的实际大小而定，整体被控制在1MB到32MB之间，且为2的N次幂，即1MB，2MB，4MB，8MB，16MB，32MB。可以通过")]),a._v(" "),t("p",[t("code",[a._v("-XX:G1HeapRegionSize")]),a._v("设定。"),t("code",[a._v("所有的Region大小相同，且在JVM生命周期内不会被改变。")])]),a._v(" "),t("p",[a._v("虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。"),t("code",[a._v("通过Region的动态分配方式实现逻辑上的连续。")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230828210956697.png",alt:"image-20230828210956697"}})]),a._v(" "),t("p",[a._v("一个region有可能属于Eden，Survivor或者Old内存区域。但是一个region只可能属于一个角色。")]),a._v(" "),t("p",[a._v("**图中的E：**表示该region属于Eden内存区域。")]),a._v(" "),t("p",[a._v("**图中的S：**表示属于survivor内存区域。")]),a._v(" "),t("p",[a._v("**图中的O：**表示属于Old内存区域。")]),a._v(" "),t("p",[a._v("**图中空白：**表示未使用的内存空间。")]),a._v(" "),t("p",[a._v("G1垃圾收集器还增加了一种新的内存区域，叫做"),t("code",[a._v("Humongous")]),a._v("内存区域，如图中的H块。主要用于存储大对象，如果超过1.5个region，就放到H。")]),a._v(" "),t("p",[a._v("**设置H的原因：**对于堆中的对象，默认直接会被分配到老年代，但是如果它是一个短期存在的大对象就会对垃圾收集器造成负面影响。为了解决这个问题，G1划分了一个Humongous区，它用来专门存放大对象。如果一个H区装不下一个大对象，那么G1会寻找连续的H区来存储。为了能找到连续的H区，有时候不得不启动Full GC。G1的大多数行为都把H区作为老年代的一部分来看待。")]),a._v(" "),t("h4",{attrs:{id:"跨region引用对象问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#跨region引用对象问题"}},[a._v("#")]),a._v(" 跨Region引用对象问题？")]),a._v(" "),t("p",[a._v("解决的思路是使用记忆集避免全堆作为GCRoots扫描（在垃圾收集相关概念的时候讲过）。")]),a._v(" "),t("p",[a._v("但在G1收集器上记忆集的应用其实要复杂很多，"),t("code",[a._v("它的每个Region都维护有自己的记忆集")]),a._v("，这些记忆集会记录下别的Region指向自己的指针，并标记这些指针分别在哪些卡页的范围之内。")]),a._v(" "),t("p",[a._v("G1的记忆集在存储结构的本质上是一种哈希表，Key是别的Region的起始地址，Value是一个集合，里面存储的元素是卡表的索引号。这种“双向”的卡表结构（卡表是“我指向谁”，这种结构还记录了“谁指向我”）比原来的卡表实现起来更复杂，同时由于Region数量比传统收集器的分代数量明显要多得多，因此G1收集器要比其他的传统垃圾收集器有着更高的内存占用负担。")]),a._v(" "),t("p",[a._v("根据经验，G1至少要耗费大约相当于Java堆容量10%至20%的额外内存来维持收集器工作。")]),a._v(" "),t("h4",{attrs:{id:"g1垃圾回收器的回收过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#g1垃圾回收器的回收过程"}},[a._v("#")]),a._v(" G1垃圾回收器的回收过程")]),a._v(" "),t("p",[a._v("G1 GC的垃圾回收过程主要包括如下三个环节：")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("年轻代GC（Young GC）")]),a._v(" "),t("p",[a._v("应用程序分配内存，当年轻代的Eden区用尽时开始年轻代回收过程；G1的年轻代收集阶段是一个并行的独占式收集器。在年轻代回收期，G1GC暂停所有应用程序线程，启动多线程执行年轻代回收。然后从年轻代区间移动存活对象到Survivor区间或者老年区间，也有可能是两个区间都会涉及。")])]),a._v(" "),t("li",[t("p",[a._v("老年代并发标记过程（Concurrent Marking）")]),a._v(" "),t("p",[a._v("当堆内存使用达到一定值（默认45%）时，开始老年代并发标记过程。")])]),a._v(" "),t("li",[t("p",[a._v("混合回收（Mixed GC）如果需要，单线程、独占式、高强度的Full GC还是继续存在的。它针对GC的评估失败提供了一种失败保护机制，即强力回收。")]),a._v(" "),t("p",[a._v("标记完成马上开始混合回收过程。对于一个混合回收期，G1 GC从老年区间移动存活对象到空闲区间，这些空闲区间也就成为了老年代的一部分。和年轻代不同，老年代的G1回收器和其他GC不同，G1的老年代回收器不需要整个老年代被回收，一次只需要扫描/回收一小部分老年代的Region就可以了。同时，这个老年代Region是和年轻代一起被回收的。")])])]),a._v(" "),t("p",[t("code",[a._v("顺时针，Young gc -> Young gc + Concurrent mark->Mixed GC顺序，进行垃圾回收。")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230909105121326.png",alt:"image-20230909105121326"}})]),a._v(" "),t("h3",{attrs:{id:"垃圾回收器总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器总结"}},[a._v("#")]),a._v(" 垃圾回收器总结")]),a._v(" "),t("h3",{attrs:{id:"gc日志分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gc日志分析"}},[a._v("#")]),a._v(" GC日志分析")]),a._v(" "),t("h4",{attrs:{id:"minor-gc日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#minor-gc日志"}},[a._v("#")]),a._v(" Minor GC日志")]),a._v(" "),t("h4",{attrs:{id:"full-gc日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#full-gc日志"}},[a._v("#")]),a._v(" Full GC日志")]),a._v(" "),t("h3",{attrs:{id:"垃圾回收器的新发展"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器的新发展"}},[a._v("#")]),a._v(" 垃圾回收器的新发展")]),a._v(" "),t("h4",{attrs:{id:"jdk11新特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk11新特性"}},[a._v("#")]),a._v(" JDK11新特性")]),a._v(" "),t("h4",{attrs:{id:"open-jdk12的shenandoash-gc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#open-jdk12的shenandoash-gc"}},[a._v("#")]),a._v(" Open JDK12的Shenandoash GC")]),a._v(" "),t("h4",{attrs:{id:"令人震惊、革命性的zgc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#令人震惊、革命性的zgc"}},[a._v("#")]),a._v(" 令人震惊、革命性的ZGC")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);