(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{419:function(t,v,_){"use strict";_.r(v);var n=_(8),l=Object(n.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"索引的数据结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#索引的数据结构"}},[t._v("#")]),t._v(" 索引的数据结构")]),t._v(" "),v("h2",{attrs:{id:"innodb索引方案"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#innodb索引方案"}},[t._v("#")]),t._v(" InnoDB索引方案")]),t._v(" "),v("p",[t._v("我们可以按以下几种分类来描述索引。")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("索引类型：")]),t._v(" "),v("ul",[v("li",[t._v("聚簇索引：主键索引，将数据行存储在索引的叶子节点中。")])]),t._v(" "),v("ol",[v("li",[t._v("数据行的物理存储顺序："),v("code",[t._v("聚簇索引将数据行存储在索引的叶子节点中")]),t._v("，而叶子节点按照索引键的顺序进行排序。这意味着具有相邻主键值的数据行在物理存储上也是相邻的，这样可以提高基于范围查询和顺序访问的性能。")]),t._v(" "),v("li",[t._v("主键索引：聚簇索引通常是基于主键创建的，因为主键是唯一标识一条记录的值，也可以确保数据的唯一性。如果表没有显式定义主键，InnoDB会自动生成一个隐藏的主键，并以该主键作为聚簇索引。")]),t._v(" "),v("li",[t._v("数据行的唯一性：由于聚簇索引是基于主键的，所以聚簇索引保证了数据行的唯一性。每个主键值只能对应一个数据行，这确保了数据的完整性和一致性。")]),t._v(" "),v("li",[t._v("聚簇索引的影响：由于聚簇索引决定了数据行的物理存储顺序，因此对聚簇索引的插入、更新和删除操作可能会导致数据行的物理重排。插入新的数据行可能需要调整数据页的位置，而更新和删除操作可能导致数据行的移动或合并，因此会引起额外的IO和性能开销。")])]),t._v(" "),v("p",[t._v("聚簇索引在数据库系统中起到重要作用，它提供了高效的范围查询和顺序访问性能，同时保证了数据行的唯一性。然而，需要注意聚簇索引的维护成本和对插入、更新和删除操作的影响，合理设计和使用聚簇索引可以提高数据库的性能和效率。")]),t._v(" "),v("ul",[v("li",[t._v("非聚簇索引：辅助索引，用于加速对非主键列的查询。")])])])])])}),[],!1,null,null,null);v.default=l.exports}}]);