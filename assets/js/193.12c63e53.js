(window.webpackJsonp=window.webpackJsonp||[]).push([[193],{523:function(s,t,a){"use strict";a.r(t);var n=a(8),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"反射"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#反射"}},[s._v("#")]),s._v(" 反射")]),s._v(" "),t("h2",{attrs:{id:"什么是反射"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是反射"}},[s._v("#")]),s._v(" 什么是反射？")]),s._v(" "),t("p",[s._v("我们通常都是利用 "),t("code",[s._v("new")]),s._v(" 方式来创建对象实例，这可以说就是一种"),t("code",[s._v("正射")]),s._v("，这种方式在编译时候就确定了类型信息。")]),s._v(" "),t("p",[s._v("而如果，我们想"),t("code",[s._v("动态")]),s._v("地获取类信息、创建类实例、调用类方法这时候就要用到"),t("code",[s._v("反射")]),s._v("。")]),s._v(" "),t("p",[s._v("通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。")]),s._v(" "),t("p",[s._v("反射的流程：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/%E6%AD%A3%E5%B8%B8%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%8F%8D%E5%B0%84%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8C%BA%E5%88%AB.drawio.png",alt:"正常创建对象与反射创建对象的区别.drawio"}})]),s._v(" "),t("p",[s._v("反射最核心的四个类：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20240308144449224.png",alt:"image-20240308144449224"}})]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1.通过字符串获取Class对象，这个字符串必须带上完整路径名")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),s._v(" studentClass "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("forName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"com.test.reflection.Student"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2.获取声明的构造方法，传入所需参数的类名，如果有多个参数，用','连接即可")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Constructor")]),s._v(" studentConstructor "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" studentClass"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getDeclaredConstructor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果是私有的构造方法，需要调用下面这一行代码使其可使用，公有的构造方法则不需要下面这一行代码，爆破")]),s._v("\nstudentConstructor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setAccessible")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 使用构造方法的newInstance方法创建对象，传入构造方法所需参数，如果有多个参数，用','连接即可")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" student "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" studentConstructor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("newInstance")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"NameA"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3.获取声明的字段，传入字段名")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Field")]),s._v(" studentAgeField "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" studentClass"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getDeclaredField")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"studentAge"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果是私有的字段，需要调用下面这一行代码使其可使用，公有的字段则不需要下面这一行代码")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// studentAgeField.setAccessible(true);")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 使用字段的set方法设置字段值，传入此对象以及参数值")]),s._v("\nstudentAgeField"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("student"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 4.获取声明的函数，传入所需参数的类名，如果有多个参数，用','连接即可")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Method")]),s._v(" studentShowMethod "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" studentClass"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getDeclaredMethod")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"show"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果是私有的函数，需要调用下面这一行代码使其可使用，公有的函数则不需要下面这一行代码")]),s._v("\nstudentShowMethod"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setAccessible")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 使用函数的invoke方法调用此函数，传入此对象以及函数所需参数，如果有多个参数，用','连接即可。函数会返回一个Object对象，使用强制类型转换转成实际类型即可")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" result "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" studentShowMethod"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("invoke")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("student"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"message"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"result: "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br")])]),t("ol",[t("li",[s._v("先用第一种全路径获取 Class 的方法获取到了 Student 的 Class 对象")]),s._v(" "),t("li",[s._v("然后反射调用它的私有构造方法 "),t("code",[s._v("private Student(String studentName)")]),s._v("，构建出 newInstance")]),s._v(" "),t("li",[s._v("再将其公有字段 studentAge 设置为 10")]),s._v(" "),t("li",[s._v("最后反射调用其私有方法 "),t("code",[s._v("show")]),s._v("，传入参数 “message”，并打印出这个方法的返回值。")])]),s._v(" "),t("p",[s._v("其中，"),t("code",[s._v("setAccessible")]),s._v(" 函数用于动态获取访问权限，Constructor、Field、Method 都提供了此方法，让我们得以访问类中的私有成员。")]),s._v(" "),t("h2",{attrs:{id:"反射的应用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#反射的应用场景"}},[s._v("#")]),s._v(" 反射的应用场景？")]),s._v(" "),t("h3",{attrs:{id:"value注解的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#value注解的实现"}},[s._v("#")]),s._v(" @Value注解的实现")]),s._v(" "),t("p",[s._v("日常使用的 Spring中使用很多的反射机制，为什么你使用 Spring 的时候 ，一个"),t("code",[s._v("@Component")]),s._v("注解就声明了一个类为 Spring Bean 呢？为什么你通过一个 "),t("code",[s._v("@Value")]),s._v("注解就读取到配置文件中的值呢？究竟是怎么起作用的呢？这些都是因为你可以基于反射分析类，然后获取到类、属性、方法的参数上的注解。你获取到注解之后，就可以做进一步的处理。")]),s._v(" "),t("h3",{attrs:{id:"jdbc-数据库的连接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdbc-数据库的连接"}},[s._v("#")]),s._v(" JDBC 数据库的连接")]),s._v(" "),t("p",[s._v("在JDBC 的操作中，如果要想进行数据库的连接，则必须按照以上的几步完成")]),s._v(" "),t("ol",[t("li",[s._v("通过Class.forName()加载数据库的驱动程序 （通过反射加载，前提是引入相关了Jar包）")]),s._v(" "),t("li",[s._v("通过 DriverManager 类进行数据库的连接，连接的时候要输入数据库的连接地址、用户名、密码")]),s._v(" "),t("li",[s._v("通过Connection 接口接收连接")])]),s._v(" "),t("h2",{attrs:{id:"反射的实现原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#反射的实现原理"}},[s._v("#")]),s._v(" 反射的实现原理？")]),s._v(" "),t("p",[s._v("反射的实现原理主要是基于Java虚拟机（JVM）的类加载机制和类对象模型。在Java中，每个类都有一个对应的Class对象，该对象包含了类的名称、字段、方法等信息。通过反射，我们可以获取到这些信息，并在运行时动态地操作类和对象。")]),s._v(" "),t("h2",{attrs:{id:"获取-class-对象的三种方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取-class-对象的三种方式"}},[s._v("#")]),s._v(" "),t("strong",[s._v("获取 Class 对象的三种方式")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1.通过字符串获取Class对象，这个字符串必须带上完整路径名")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),s._v(" studentClass "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("forName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"com.test.reflection.Student"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2.通过类的class属性")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),s._v(" studentClass2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Student")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3.通过对象的getClass()函数")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Student")]),s._v(" studentObject "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Student")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),s._v(" studentClass3 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" studentObject"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("ul",[t("li",[s._v("第一种方法是通过类的全路径字符串获取 Class 对象，这也是我们平时最常用的反射获取 Class 对象的方法；")]),s._v(" "),t("li",[s._v("第二种方法有限制条件：需要导入类的包；")]),s._v(" "),t("li",[s._v("第三种方法已经有了 Student 对象，不再需要反射。")])])])}),[],!1,null,null,null);t.default=e.exports}}]);