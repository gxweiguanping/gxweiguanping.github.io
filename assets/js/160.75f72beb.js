(window.webpackJsonp=window.webpackJsonp||[]).push([[160],{490:function(t,e,a){"use strict";a.r(e);var s=a(8),r=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"mq的应用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mq的应用场景"}},[t._v("#")]),t._v(" MQ的应用场景")]),t._v(" "),e("h2",{attrs:{id:"异步处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#异步处理"}},[t._v("#")]),t._v(" 异步处理")]),t._v(" "),e("p",[e("strong",[t._v("举例说明")])]),t._v(" "),e("p",[t._v("用户注册后，需要发注册邮件和注册短信，传统的做法有两种：")]),t._v(" "),e("p",[t._v("1、串行的方式")]),t._v(" "),e("p",[t._v("将注册信息写入数据库后,发送注册邮件,再发送注册短信, 以上三个任务全部完成后才返回给客户端。 这有一个问题是,邮件, 短信并不是必须的,它只是一个通知,而这种做法让客户端等待没有 必要等待的东西")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230817115121616.png",alt:"image-20230817115121616"}})]),t._v(" "),e("p",[t._v("2、并行的方式")]),t._v(" "),e("p",[t._v("将注册信息写入数据库后,发送邮件的同时,发送短信, 以上三个任务完成后,返回给客户端,并行的方式能提高处理的时间。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230817115254368.png",alt:"image-20230817115254368"}})]),t._v(" "),e("p",[e("strong",[t._v("新的做法：使用消息队列")])]),t._v(" "),e("blockquote",[e("p",[t._v("消息队列:假设三个业务节点分别使用30ms,串行方式使用时间90ms,并行使用时间60ms。虽然并行已经提高的处理时间,但是,前面说过,邮件和短信对我正常的使用网站没有任何影响，客户端没有必要等着其发送完成才显示注册成功,应该是写入数据库后就返回。")]),t._v(" "),e("p",[t._v("消息队列: 引入消息队列后，把发送邮件，短信不是必须的业务逻辑异步处理 。")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230817115615263.png",alt:"image-20230817115615263"}})]),t._v(" "),e("p",[t._v("由此可以看出，引入消息队列后，用户的响应时间就等于写入数据库的时间+写入消息队列的时间(可以忽略不计)，引入消息队列后处理后，响应时间是串行的3倍，是并行的2倍。")]),t._v(" "),e("h2",{attrs:{id:"应用解耦"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#应用解耦"}},[t._v("#")]),t._v(" 应用解耦")]),t._v(" "),e("p",[e("strong",[t._v("举例说明")])]),t._v(" "),e("p",[t._v("在双11购物狂节中，假设用户A下了一个订单，包含商品X数量为2。用户下单后，订单系统需要通知库存系统，传统的做法就是订单系统调用库存系统的接口。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230817121918907.png",alt:"image-20230817121918907"}})]),t._v(" "),e("p",[t._v("这种方式虽然简单，但存在一些问题。例如，当库存系统出现故障或者接口调用失败时，可能会影响到订单系统的正常运行；另外，如果库存系统的接口发生变化，订单系统也需要相应地调整代码，导致系统耦合度较高，维护和升级会变得复杂。")]),t._v(" "),e("p",[e("strong",[t._v("解决方案")])]),t._v(" "),e("p",[t._v("为了解决这些问题，可以引入消息队列（如 RabbitMQ）来实现解耦。具体流程如下：")]),t._v(" "),e("ol",[e("li",[t._v("用户下单后，订单系统生成订单信息，将订单数据封装成消息发送到消息队列中，而不是直接调用库存系统接口。")]),t._v(" "),e("li",[t._v("库存系统作为消息队列的消费者，监听订单消息队列。一旦有新的订单消息进入队列，库存系统会从消息中获取订单信息，并根据订单信息更新商品库存。")]),t._v(" "),e("li",[t._v("通过这种方式，订单系统和库存系统之间不再直接耦合，订单系统只需要将消息发送到队列中，不需要关心具体的库存操作。库存系统也只需要监听队列并根据消息处理库存，而不需要直接与订单系统通信。")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20230817122902939.png",alt:"image-20230817122902939"}})]),t._v(" "),e("h2",{attrs:{id:"流量削峰"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#流量削峰"}},[t._v("#")]),t._v(" 流量削峰")]),t._v(" "),e("p",[t._v("举个例子，如果订单系统最多能处理一万次订单，这个处理能力应付正常时段的下单时绰绰有余，正常时段我们下单一秒后就能返回结果。但是在高峰期，如果有两万次下单操作系统是处理不了的，只能限制订单超过一万后不允许用户下单。使用消息队列做缓冲，我们可以取消这个限制，把一秒内下的订单分散成一段时间来处理，这时有些用户可能在下单十几秒后才能收到下单成功的操作，但是比不能下单的体验要好。")])])}),[],!1,null,null,null);e.default=r.exports}}]);