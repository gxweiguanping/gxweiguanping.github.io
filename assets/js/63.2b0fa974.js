(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{392:function(t,e,a){"use strict";a.r(e);var r=a(8),s=Object(r.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"jpa-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jpa-api"}},[t._v("#")]),t._v(" JPA API")]),t._v(" "),e("h2",{attrs:{id:"jpa相关接口-类-persistence"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jpa相关接口-类-persistence"}},[t._v("#")]),t._v(" JPA相关接口/类：Persistence")]),t._v(" "),e("p",[t._v("Persistence  类是用于获取 EntityManagerFactory 实例。该类包含一个名为 createEntityManagerFactory 的 静态方法 。")]),t._v(" "),e("p",[t._v("createEntityManagerFactory 方法有如下两个重载版本。")]),t._v(" "),e("ul",[e("li",[t._v("带有一个参数的方法：以 JPA 配置文件 persistence.xml 中的持久化单元名为参数")]),t._v(" "),e("li",[t._v("带有两个参数的方法：前一个参数含义相同，后一个参数 Map类型，用于设置 JPA 的相关属性，这时将忽略其它地方设置的属性。Map 对象的属性名必须是 JPA 实现库提供商的名字空间约定的属性名。")])]),t._v(" "),e("h2",{attrs:{id:"entitymanagerfactory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#entitymanagerfactory"}},[t._v("#")]),t._v(" EntityManagerFactory")]),t._v(" "),e("p",[t._v("EntityManagerFactory 接口主要用来创建 EntityManager 实例。该接口约定了如下4个方法：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("createEntityManager()")]),t._v("：用于创建实体管理器对象实例。")]),t._v(" "),e("li",[e("strong",[t._v("createEntityManager(Map map)")]),t._v("：用于创建实体管理器对象实例的重载方法，Map 参数用于提供 EntityManager 的属性。")]),t._v(" "),e("li",[e("strong",[t._v("isOpen()")]),t._v("：检查 EntityManagerFactory 是否处于打开状态。实体管理器工厂创建后一直处于打开状态，除非调用close()方法将其关闭。")]),t._v(" "),e("li",[e("strong",[t._v("close()")]),t._v("：关闭 EntityManagerFactory 。 EntityManagerFactory 关闭后将释放所有资源，isOpen()方法测试将返回 false，其它方法将不能调用，否则将导致IllegalStateException异常。")])]),t._v(" "),e("h2",{attrs:{id:"entitymanager"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#entitymanager"}},[t._v("#")]),t._v(" EntityManager")]),t._v(" "),e("p",[t._v("在 JPA 规范中, EntityManager 是完成持久化操作的核心对象。实体作为普通 Java 对象，只有在调用 EntityManager 将其持久化后才会变成持久化对象。EntityManager 对象在一组实体类与底层数据源之间进行 O/R 映射的管理。它可以用来管理和更新 Entity Bean， 根椐主键查找 Entity Bean，还可以通过JPQL语句查询实体。")]),t._v(" "),e("p",[t._v("实体的状态：")]),t._v(" "),e("ul",[e("li",[t._v("新建状态:   新创建的对象，尚未拥有持久性主键。")]),t._v(" "),e("li",[t._v("持久化状态：已经拥有持久性主键并和持久化建立了上下文环境 。")]),t._v(" "),e("li",[t._v("游离状态："),e("strong",[t._v("拥有持久化主键")]),t._v("，但是没有与持久化建立上下文环境 。")]),t._v(" "),e("li",[t._v("删除状态:  拥有持久化主键，已经和持久化建立上下文环境，但是从数据库中删除。")])]),t._v(" "),e("h3",{attrs:{id:"find"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#find"}},[t._v("#")]),t._v(" find")]),t._v(" "),e("p",[e("strong",[t._v("find (Class"),e("code",[t._v("<T>")]),t._v(" entityClass,Object primaryKey)")]),t._v("：返回指定的 OID 对应的实体类对象。")]),t._v(" "),e("ul",[e("li",[t._v("如果这个实体存在于当前的持久化环境，则返回一个被缓存的对象；否则会创建一个新的 Entity, 并加载数据库中相关信息；")]),t._v(" "),e("li",[t._v("若 OID 不存在于数据库中，则返回一个 null。第一个参数为被查询的实体类类型，第二个参数为待查找实体的主键值。")])]),t._v(" "),e("h3",{attrs:{id:"getreference"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#getreference"}},[t._v("#")]),t._v(" getReference")]),t._v(" "),e("p",[e("strong",[t._v("getReference (Class"),e("code",[t._v("<T>")]),t._v("  entityClass,Object primaryKey)")]),t._v("：与find()方法类似，不同的是：")]),t._v(" "),e("p",[t._v("如果缓存中不存在指定的 Entity，EntityManager 会创建一个 Entity 类的代理，但是不会立即加载数据库中的信息，只有第一次真正使用此 Entity 的属性才加载，所以"),e("strong",[t._v("如果此 OID 在数据库不存在")]),t._v("，getReference() 不会返回 null ，而是"),e("strong",[t._v("抛出EntityNotFoundException")]),t._v(" 。")]),t._v(" "),e("h3",{attrs:{id:"persist"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#persist"}},[t._v("#")]),t._v(" "),e("strong",[t._v("persist")])]),t._v(" "),e("p",[e("strong",[t._v("persist")]),t._v(" "),e("strong",[t._v("(Object entity)")]),t._v("：用于将新创建的 Entity 纳入到 EntityManager 的管理。该方法执行后，传入 persist() 方法的 Entity 对象转换成持久化状态。")]),t._v(" "),e("ul",[e("li",[t._v("如果传入 persist() 方法的 Entity 对象已经处于持久化状态，则 persist() 方法什么都不做。")]),t._v(" "),e("li",[t._v("如果对删除状态的 Entity 进行 persist() 操作，会转换为持久化状态。")]),t._v(" "),e("li",[t._v("如果对游离状态的实体执行 persist() 操作，可能会在 persist() 方法抛出 EntityExistException(也有可能是在flush或事务提交后抛出)")])]),t._v(" "),e("h3",{attrs:{id:"remove"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#remove"}},[t._v("#")]),t._v(" remove")]),t._v(" "),e("p",[e("strong",[t._v("remove (Object entity)：删除实例")]),t._v("。如果实例是被管理的，即与数据库实体记录关联，则同时会删除关联的数据库记录。")]),t._v(" "),e("h3",{attrs:{id:"merge"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#merge"}},[t._v("#")]),t._v(" merge")]),t._v(" "),e("p",[e("strong",[t._v("merge (T entity)")]),t._v("：merge() 用于处理 Entity 的同步。即数据库的插入和更新操作。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/20240513203543.png",alt:"20240513203543"}})]),t._v(" "),e("h3",{attrs:{id:"flush"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flush"}},[t._v("#")]),t._v(" flush")]),t._v(" "),e("p",[e("strong",[t._v("flush ()")]),t._v("：同步持久上下文环境，即将持久上下文环境的所有未保存实体的状态信息保存到数据库中。")]),t._v(" "),e("h3",{attrs:{id:"refresh"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#refresh"}},[t._v("#")]),t._v(" refresh")]),t._v(" "),e("p",[e("strong",[t._v("refresh (Object entity)")]),t._v("：用数据库实体记录的值更新实体对象的状态，即更新实例的属性值。")]),t._v(" "),e("h3",{attrs:{id:"clear"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#clear"}},[t._v("#")]),t._v(" clear")]),t._v(" "),e("p",[e("strong",[t._v("clear ()")]),t._v("：清除持久上下文环境，断开所有关联的实体。如果这时还有未提交的更新则会被撤消。")]),t._v(" "),e("h3",{attrs:{id:"close"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#close"}},[t._v("#")]),t._v(" "),e("strong",[t._v("close")])]),t._v(" "),e("p",[e("strong",[t._v("close ()")]),t._v("：关闭实体管理器。之后若调用实体管理器实例的方法或其派生的查询对象的方法都将抛出 IllegalstateException 异常，除了getTransaction 和 isOpen方法(返回 false)。不过，当与实体管理器关联的事务处于活动状态时，调用 close 方法后持久上下文将仍处于被管理状态，直到事务完成。")]),t._v(" "),e("h3",{attrs:{id:"createquery"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#createquery"}},[t._v("#")]),t._v(" createQuery")]),t._v(" "),e("p",[e("strong",[t._v("createQuery (String qlString)")]),t._v("：创建一个查询对象。")]),t._v(" "),e("h3",{attrs:{id:"createnamedquery"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#createnamedquery"}},[t._v("#")]),t._v(" createNamedQuery")]),t._v(" "),e("p",[e("strong",[t._v("createNamedQuery (String name)")]),t._v("：根据命名的查询语句块创建查询对象。参数为命名的查询语句。")]),t._v(" "),e("h3",{attrs:{id:"createnativequery"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#createnativequery"}},[t._v("#")]),t._v(" createNativeQuery")]),t._v(" "),e("p",[e("strong",[t._v("createNativeQuery (String sqlString)")]),t._v("：使用标准 SQL语句创建查询对象。参数为标准SQL语句字符串。")]),t._v(" "),e("p",[e("strong",[t._v("createNativeQuery (String sqls, String resultSetMapping)")]),t._v("：使用标准SQL语句创建查询对象，并指定返回结果集 Map的 名称。")])])}),[],!1,null,null,null);e.default=s.exports}}]);