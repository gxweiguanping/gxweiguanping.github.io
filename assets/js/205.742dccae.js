(window.webpackJsonp=window.webpackJsonp||[]).push([[205],{535:function(t,s,a){"use strict";a.r(s);var e=a(8),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池"}},[t._v("#")]),t._v(" 线程池")]),t._v(" "),s("h2",{attrs:{id:"什么是线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是线程池"}},[t._v("#")]),t._v(" 什么是线程池？")]),t._v(" "),s("p",[s("strong",[t._v("线程池")]),t._v("： 简单理解，它就是一个管理线程的池子。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20240314162028583.png",alt:"image-20240314162028583"}})]),t._v(" "),s("ul",[s("li",[t._v("它帮我们管理线程，避免增加创建线程和销毁线程的资源损耗 。因为线程其实也是一个对象，创建一个对象，需要经过类加载过程，销毁一个对象，需要走GC垃圾回收流程，都是需要资源开销的。")]),t._v(" "),s("li",[t._v("提高响应速度。 如果任务到达了，相对于从线程池拿线程，重新去创建一条线程执行，速度肯定慢很多。")]),t._v(" "),s("li",[t._v("重复利用。 线程用完，再放回池子，可以达到重复利用的效果，节省资源。")])]),t._v(" "),s("h2",{attrs:{id:"说一下线程池的工作流程吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说一下线程池的工作流程吗"}},[t._v("#")]),t._v(" 说一下线程池的工作流程吗？")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("线程池刚创建时，里面没有一个线程。任务队列是作为参数传进来的。不过，就算队列里面有任务，线程池也不会马上执行它们。")])]),t._v(" "),s("li",[s("p",[t._v("当调用 execute() 方法添加一个任务时，线程池会做如下判断：")])])]),t._v(" "),s("ul",[s("li",[t._v("如果正在运行的线程数量小于 corePoolSize，那么马上创建线程运行这个任务；")]),t._v(" "),s("li",[t._v("如果正在运行的线程数量大于或等于 corePoolSize，那么将这个任务放入队列；")]),t._v(" "),s("li",[t._v("如果这时候有界队列满了，而且正在运行的线程数量小于 maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务；\n"),s("ul",[s("li",[t._v("如果使用的是无界队列，那么就不会创建救急线程，因为队列里面可以一直放任务，知道内存溢出。")])])]),t._v(" "),s("li",[t._v("如果队列满了，而且正在运行的线程数量大于或等于 maximumPoolSize，那么线程池会根据拒绝策略来对应处理。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20240314165022828.png",alt:"image-20240314165022828"}})]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[s("p",[t._v("当一个线程完成任务时，它会从队列中取下一个任务来执行。")])]),t._v(" "),s("li",[s("p",[t._v("当一个线程无事可做，超过一定的时间（keepAliveTime）时，线程池会判断，如果当前运行的线程数大于 corePoolSize，那么这个线程就被停掉。所以线程池的所有任务完成后，它最终会收缩到 corePoolSize 的大小。")])])]),t._v(" "),s("h2",{attrs:{id:"jdk自带的创建线程池的5种方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdk自带的创建线程池的5种方式"}},[t._v("#")]),t._v(" JDK自带的创建线程池的5种方式")]),t._v(" "),s("p",[t._v("Java的"),s("code",[t._v("java.util.concurrent")]),t._v("包提供了几种不同类型的线程池创建方式，包括：")]),t._v(" "),s("h3",{attrs:{id:"newfixedthreadpool"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#newfixedthreadpool"}},[t._v("#")]),t._v(" newFixedThreadPool")]),t._v(" "),s("p",[s("strong",[t._v("创建一个固定大小的线程池")]),t._v("，所有线程都被重用，存在一个队列用于存储待执行的任务。")]),t._v(" "),s("ul",[s("li",[t._v("核心线程数 == 最大线程数（没有救急线程被创建），因此也无需超时时间")]),t._v(" "),s("li",[t._v("阻塞队列是无界的，可以放任意数量的任务")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newFixedThreadPool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" nThreads"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nThreads"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nThreads"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0L")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MILLISECONDS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedBlockingQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h3",{attrs:{id:"newcachedthreadpool"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#newcachedthreadpool"}},[t._v("#")]),t._v(" newCachedThreadPool")]),t._v(" "),s("p",[s("strong",[t._v("创建一个可以缓存的线程池")]),t._v("。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("核心线程数是 0，最大线程数是 Integer.MAX_VALUE，救急线程的空闲生存时间是 60s，意味着")])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("全部都是救急线程（60s 后可以回收）")]),t._v(" "),s("li",[t._v("救急线程可以无限创建")])])]),t._v(" "),s("li",[s("p",[t._v("队列采用了 SynchronousQueue 实现特点是，它没有容量，没有线程来取是放不进去的（一手交钱、一手交货）")])])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newCachedThreadPool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAX_VALUE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("60L")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SECONDS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SynchronousQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h3",{attrs:{id:"newsinglethreadexecutor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#newsinglethreadexecutor"}},[t._v("#")]),t._v(" newSingleThreadExecutor")]),t._v(" "),s("p",[s("strong",[t._v("创建只有一个线程的线程池")]),t._v("，它可以保证先进先出的执行顺序。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newSingleThreadExecutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FinalizableDelegatedExecutorService")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0L")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MILLISECONDS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedBlockingQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("使用场景：")]),t._v(" "),s("p",[t._v("希望多个任务排队执行。线程数固定为 1，任务数多于 1 时，会放入无界队列排队。")]),t._v(" "),s("p",[t._v("任务执行完毕，这唯一的线程也不会被释放。")]),t._v(" "),s("h3",{attrs:{id:"newscheduledthreadpool"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#newscheduledthreadpool"}},[t._v("#")]),t._v(" newScheduledThreadPool")]),t._v(" "),s("p",[s("strong",[t._v("创建一个可以执行定时任务的线程池")]),t._v("，通过"),s("code",[t._v("schedule")]),t._v("方法可以设置任务的延迟执行时间，"),s("code",[t._v("scheduleAtFixedRate")]),t._v("和"),s("code",[t._v("scheduleWithFixedDelay")]),t._v("方法可以设置任务的定期执行。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ScheduledExecutorService")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newScheduledThreadPool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" corePoolSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ScheduledThreadPoolExecutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("corePoolSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ScheduledThreadPoolExecutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" corePoolSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("corePoolSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAX_VALUE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NANOSECONDS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n             "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DelayedWorkQueue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// super其实就是ThreadPoolExecutor下面的这个方法")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" corePoolSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                              "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maximumPoolSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                              "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" keepAliveTime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                              "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),t._v(" unit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                              "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BlockingQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" workQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("corePoolSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" maximumPoolSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" keepAliveTime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" workQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n             "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("defaultThreadFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" defaultHandler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br")])]),s("h3",{attrs:{id:"newworkstealingpool"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#newworkstealingpool"}},[t._v("#")]),t._v(" newWorkStealingPool")]),t._v(" "),s("p",[t._v("创建持有足够线程的线程池来支持给定的并行级别，并通过使用多数线程的ForkJoinPool实现，它可以充分利用多核处理器的优势，比如，当一个任务等待另一个任务的结果时，线程可以寻找其他未被执行的任务并执行它。可以使用"),s("code",[t._v("Executors.newWorkStealingPool(int)")]),t._v("方法创建。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newFixedThreadPool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" nThreads"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadFactory")]),t._v(" threadFactory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nThreads"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nThreads"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                      "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0L")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MILLISECONDS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedBlockingQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                      threadFactory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("h2",{attrs:{id:"threadpoolexecutor线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#threadpoolexecutor线程池"}},[t._v("#")]),t._v(" ThreadPoolExecutor线程池")]),t._v(" "),s("p",[t._v("虽然Java为我们提供了很多创建线程池的方便方法，但在实际使用中，还是建议使用"),s("code",[t._v("ThreadPoolExecutor")]),t._v("直接创建线程池，因为这样可以"),s("strong",[t._v("明确线程池的运行规则")]),t._v("，"),s("strong",[t._v("避免资源耗尽的风险")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"线程池的状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池的状态"}},[t._v("#")]),t._v(" 线程池的状态")]),t._v(" "),s("p",[t._v("ThreadPoolExecutor 使用 int 的高 3 位来表示线程池状态，低 29 位表示线程数量")]),t._v(" "),s("p",[t._v("Java中的"),s("code",[t._v("ThreadPoolExecutor")]),t._v("线程池主要有以下几种状态：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("状态名")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("高3位")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("接收新任务")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("处理阻塞队列任务")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("RUNNING")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("111")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Y")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Y")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("可以接受新任务并且也可以处理阻塞队列中的任务")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("SHUTDOWN")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("000")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("N")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Y")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("不接受新任务了，不过它可以继续处理阻塞队列中的任务")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("STOP")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("001")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("N")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("N")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("不接受新任务，也不处理队列中的任务，同时会中断正在处理的任务")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("TIDYING")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("010")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("所有的任务都已终止，workerCount（线程池中活动线程的数目）为零，线程会转化到TIDYING状态，并将会调用terminated()函数。")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("TERMINATED")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("011")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("终结状态")])])])]),t._v(" "),s("p",[t._v("从数字上比较，TERMINATED > TIDYING > STOP > SHUTDOWN > RUNNING")]),t._v(" "),s("p",[s("strong",[t._v("因为第一位是符号位，RUNNING 是负数，所以最小。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%8A%B6%E6%80%81%E6%B5%81%E8%BD%AC%E5%9B%BE.drawio.png",alt:"线程池状态流转图.drawio"}})]),t._v(" "),s("p",[s("strong",[t._v("为什么线程池的状态不用两个整数来表示，而是使用一个整数呢？")])]),t._v(" "),s("p",[t._v("这些信息存储在一个原子变量 ctl 中，目的是将线程池状态与线程个数合二为一，这样就可以用一次 cas 原子操作进行赋值")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// c 为旧值， ctlOf 返回结果为新值")]),t._v("\nctl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareAndSet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ctlOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("targetState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("workerCountOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// rs 为高 3 位代表线程池状态， wc 为低 29 位代表线程个数，ctl 是合并它们")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ctlOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" rs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" wc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" rs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" wc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h3",{attrs:{id:"构造方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造方法"}},[t._v("#")]),t._v(" 构造方法")]),t._v(" "),s("p",[t._v("ThreadPoolExecutor的构造方法主要如下：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" corePoolSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maximumPoolSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" keepAliveTime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                          "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),t._v(" unit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                          "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BlockingQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" workQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                          "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadFactory")]),t._v(" threadFactory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                          "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RejectedExecutionHandler")]),t._v(" handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("h3",{attrs:{id:"核心参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#核心参数"}},[t._v("#")]),t._v(" 核心参数")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("参数")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("解释")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("corePoolSize")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("线程池的"),s("strong",[t._v("核心线程数量")]),t._v("，即使空闲也会保留的线程数量")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("maximumPoolSize")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("线程池的"),s("strong",[t._v("最大线程数量")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("keepAliveTime")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("非核心线程（救急线程）闲置超时时长，在这个时间后，非核心线程（救急线程）会被回收")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("unit")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("针对非核心线程（救急线程），keepAliveTime的时间单位，例如TimeUnit.SECONDS表示秒")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("workQueue")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("任务队列，用于存放等待执行的任务")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("threadFactory")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("线程工厂，用于创建线程。")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("handler")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("拒绝策略，当任务队列满且线程数量达到最大值时，用于处理新提交的任务。")])])])]),t._v(" "),s("h3",{attrs:{id:"等待队列-workqueue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#等待队列-workqueue"}},[t._v("#")]),t._v(" "),s("strong",[t._v("等待队列（workQueue）")])]),t._v(" "),s("p",[t._v("任何阻塞队列（BlockingQueue）都可以用来转移或保存提交的任务，线程池大小和阻塞队列相互约束线程池：")]),t._v(" "),s("p",[t._v("1、"),s("strong",[t._v("直接传递")]),t._v("：通过 SynchronousQueue 直接把任务传递给线程。如果当前没可用线程，尝试入队操作会失败，然后再创建一个新的线程。当处理可能具有内部依赖性的请求时，该策略会避免请求被锁定。直接传递通常需要无界的最大线程数（maximumPoolSize），避免拒绝新提交的任务。当任务持续到达的平均速度超过可处理的速度时，可能导致线程的无限增长。")]),t._v(" "),s("p",[t._v("2、"),s("strong",[t._v("无界队列")]),t._v("：使用无界队列（如 LinkedBlockingQueue）作为等待队列，当所有的核心线程都在处理任务时， 新提交的任务都会进入队列等待。因此，不会有大于 corePoolSize 的线程会被创建**（maximumPoolSize 也将失去作用）**。这种策略适合每个任务都完全独立于其他任务的情况；例如网站服务器。这种类型的等待队列可以使瞬间爆发的高频请求变得平滑。当任务持续到达的平均速度超过可处理速度时，可能导致等待队列无限增长。")]),t._v(" "),s("p",[t._v("3、"),s("strong",[t._v("有界队列")]),t._v("：当使用有限的最大线程数时，有界队列（如 ArrayBlockingQueue）可以防止资源耗尽，但是难以调整和控制。队列大小和线程池大小可以相互作用：使用大的队列和小的线程数可以减少CPU使用率、系统资源和上下文切换的开销，但是会导致吞吐量变低，如果任务频繁地阻塞（例如被I/O限制），系统就能为更多的线程调度执行时间。使用小的队列通常需要更多的线程数，这样可以最大化CPU使用率，但可能会需要更大的调度开销，从而降低吞吐量。")]),t._v(" "),s("h3",{attrs:{id:"拒绝策略-handler"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拒绝策略-handler"}},[t._v("#")]),t._v(" "),s("strong",[t._v("拒绝策略（handler）")])]),t._v(" "),s("p",[t._v("如果线程到达 maximumPoolSize 仍然有新任务这时会执行拒绝策略。拒绝策略 jdk 提供了 4 种实现")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20240130160425232.png",alt:"image-20240130160425232"}})]),t._v(" "),s("p",[t._v("1、"),s("strong",[t._v("AbortPolicy")]),t._v("：默认策略，在需要拒绝任务时抛出RejectedExecutionException异常；")]),t._v(" "),s("p",[t._v("2、"),s("strong",[t._v("CallerRunsPolicy")]),t._v("："),s("strong",[t._v("直接在 execute 方法的调用线程中运行被拒绝的任务（让调用者运行任务 ）")]),t._v("，如果线程池已经关闭，任务将被丢弃；")]),t._v(" "),s("p",[t._v("3、"),s("strong",[t._v("DiscardPolicy")]),t._v("：直接丢弃任务；")]),t._v(" "),s("p",[t._v("4、"),s("strong",[t._v("DiscardOldestPolicy")]),t._v("：丢弃队列中等待时间最长的任务，并执行当前提交的任务，如果线程池已经关闭，任务将被丢弃。")]),t._v(" "),s("p",[t._v("我们也可以自定义拒绝策略，只需要实现 RejectedExecutionHandler； 需要注意的是，拒绝策略的运行需要指定线程池和队列的容量。")]),t._v(" "),s("h3",{attrs:{id:"线程池的执行流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池的执行流程"}},[t._v("#")]),t._v(" 线程池的执行流程")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%8E%A5%E6%94%B6%E4%BB%BB%E5%8A%A1%E6%B5%81%E7%A8%8B%E5%9B%BE.drawio.png",alt:"线程池接收任务流程图.drawio"}})]),t._v(" "),s("ul",[s("li",[t._v("线程池中刚开始没有线程，当一个任务提交给线程池后，线程池会创建一个新线程来执行任务。")]),t._v(" "),s("li",[t._v("当线程数达到 corePoolSize 并没有线程空闲，这时再加入任务，新加的任务会被加入workQueue 队列排队，直到有空闲的线程。")]),t._v(" "),s("li",[s("strong",[t._v("如果队列选择了有界队列，那么任务超过了队列大小时，会创建 maximumPoolSize - corePoolSize 数目的线程来救急。")])]),t._v(" "),s("li",[t._v("如果线程到达 maximumPoolSize 仍然有新任务这时会执行拒绝策略。")]),t._v(" "),s("li",[t._v("当高峰过去后，超过corePoolSize 的救急线程如果一段时间没有任务做，需要结束节省资源，这个时间由keepAliveTime 和 unit 来控制。")])]),t._v(" "),s("h2",{attrs:{id:"线程池中-submit-和-execute-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池中-submit-和-execute-方法"}},[t._v("#")]),t._v(" 线程池中 submit() 和 execute() 方法")]),t._v(" "),s("p",[s("code",[t._v("submit()")]),t._v(" 和 "),s("code",[t._v("execute()")]),t._v(" 是 "),s("code",[t._v("ThreadPoolExecutor")]),t._v(" 提供的两个方法，用于向线程池提交任务，但是它们之间存在一些不同：")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("返回值")]),t._v("："),s("code",[t._v("execute()")]),t._v(" 方法没有返回值，如果你提交的任务需要返回计算结果，那么 "),s("code",[t._v("execute()")]),t._v(" 方法就无法满足需求。而 "),s("code",[t._v("submit()")]),t._v(" 方法返回一个 "),s("code",[t._v("Future")]),t._v(" 对象，你可以通过这个 "),s("code",[t._v("Future")]),t._v(" 对象获取任务的执行结果。")]),t._v(" "),s("li",[s("strong",[t._v("异常处理")]),t._v("："),s("code",[t._v("execute()")]),t._v(" 方法在执行任务过程中如果发生异常会直接抛出，如果你没有对异常进行处理，那么会导致整个线程终止。"),s("code",[t._v("submit()")]),t._v(" 方法在任务执行过程中如果发生异常，它不会直接抛出，而是会把异常信息封装在 "),s("code",[t._v("Future")]),t._v(" 对象中，只有在你显式地调用 "),s("code",[t._v("Future.get()")]),t._v(" 方法的时候才会抛出。")])]),t._v(" "),s("p",[t._v("因此，如果你提交的任务需要返回结果，或者希望更好地处理任务执行过程中的异常，那么你应该使用 "),s("code",[t._v("submit()")]),t._v(" 方法。如果你提交的任务不需要返回结果，并且可以自行处理任务执行过程中的异常，那么可以使用 "),s("code",[t._v("execute()")]),t._v(" 方法。")])])}),[],!1,null,null,null);s.default=n.exports}}]);