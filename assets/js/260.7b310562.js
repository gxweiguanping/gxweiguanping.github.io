(window.webpackJsonp=window.webpackJsonp||[]).push([[260],{590:function(t,l,i){"use strict";i.r(l);var v=i(8),a=Object(v.a)({},(function(){var t=this,l=t._self._c;return l("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[l("h1",{attrs:{id:"引言"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#引言"}},[t._v("#")]),t._v(" 引言")]),t._v(" "),l("h2",{attrs:{id:"什么是微服务"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#什么是微服务"}},[t._v("#")]),t._v(" 什么是微服务？")]),t._v(" "),l("p",[t._v("微服务（Microservices）是一种软件架构风格，将一个大型应用程序划分为一组小型、自治且松耦合的服务。每个微服务负责执行特定的业务功能，并通过轻量级通信机制（如HTTP）相互协作。每个微服务可以独立开发、部署和扩展，使得应用程序更加灵活、可伸缩和可维护。")]),t._v(" "),l("p",[t._v("在微服务的架构演进中，一般可能会存在这样的演进方向：单体式--\x3e服务化--\x3e微服务。")]),t._v(" "),l("p",[t._v("单体服务一般是所有项目最开始的样子：")]),t._v(" "),l("ul",[l("li",[t._v("单体服务（Monolithic Service）是一种传统的软件架构方式，将整个应用程序作为一个单一的、紧耦合的单元进行开发和部署。单体服务通常由多个模块组成，这些模块共享同一个数据库和代码库。然而，随着应用程序规模的增长，单体服务可能变得庞大且难以维护，且部署和扩展困难。")])]),t._v(" "),l("p",[t._v("后来，单体服务过大，维护困难，渐渐演变到了分布式的SOA：")]),t._v(" "),l("ul",[l("li",[l("p",[t._v("SOA（Service-Oriented Architecture，面向服务的架构）是一种软件架构设计原则，强调将应用程序拆分为相互独立的服务，通过标准化的接口进行通信。SOA关注于服务的重用性和组合性，但并没有具体规定服务的大小。")])]),t._v(" "),l("li",[l("p",[t._v("微服务是在SOA的基础上进一步发展而来，是一种特定规模下的服务拆分和部署方式。微服务架构强调将应用程序拆分为小型、自治且松耦合的服务，每个服务都专注于特定的业务功能。这种架构使得应用程序更加灵活、可伸缩和可维护。")])])]),t._v(" "),l("blockquote",[l("p",[t._v("需要注意的是，微服务是一种特定的架构风格，而SOA是一种设计原则。微服务可以看作是对SOA思想的一种具体实践方式，但并不等同于SOA。")])]),t._v(" "),l("p",[l("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/202404012.png",alt:"202404012"}})]),t._v(" "),l("h2",{attrs:{id:"微服务有哪些组件"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#微服务有哪些组件"}},[t._v("#")]),t._v(" 微服务有哪些组件？")]),t._v(" "),l("p",[t._v("微服务给系统开发带来了一些问题和挑战，如服务调用的复杂性、分布式事务的处理、服务的动态管理等。为了更好地解决这些问题和挑战，各种微服务治理的组件应运而生，充当微服务架构的基石和支撑。")]),t._v(" "),l("p",[l("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/771059105432.png",alt:"771059105432"}})]),t._v(" "),l("p",[t._v("微服务的各个组件和常见实现：")]),t._v(" "),l("ol",[l("li",[t._v("注册中心：用于服务的注册与发现，管理微服务的地址信息。常见的实现包括：")])]),t._v(" "),l("ul",[l("li",[t._v("Spring Cloud Netflix：Eureka、Consul")]),t._v(" "),l("li",[t._v("Spring Cloud Alibaba：Nacos")])]),t._v(" "),l("ol",{attrs:{start:"2"}},[l("li",[t._v("配置中心：用于集中管理微服务的配置信息，可以动态修改配置而不需要重启服务。常见的实现包括：")])]),t._v(" "),l("ul",[l("li",[t._v("Spring Cloud Netflix：Spring Cloud Config")]),t._v(" "),l("li",[t._v("Spring Cloud Alibaba：Nacos Config")])]),t._v(" "),l("ol",{attrs:{start:"3"}},[l("li",[t._v("远程调用：用于在不同的微服务之间进行通信和协作。常见的实现保包括：")])]),t._v(" "),l("ul",[l("li",[t._v("RESTful API：如RestTemplate、Feign")]),t._v(" "),l("li",[t._v("RPC（远程过程调用）：如Dubbo、gRPC")])]),t._v(" "),l("ol",{attrs:{start:"4"}},[l("li",[t._v("API网关：作为微服务架构的入口，统一暴露服务，并提供路由、负载均衡、安全认证等功能。常见的实现包括：")])]),t._v(" "),l("ul",[l("li",[t._v("Spring Cloud Netflix：Zuul、Gateway")]),t._v(" "),l("li",[t._v("Spring Cloud Alibaba：Gateway、Apisix等")])]),t._v(" "),l("ol",{attrs:{start:"5"}},[l("li",[t._v("分布式事务：保证跨多个微服务的一致性和原子性操作。常见的实现包括：")])]),t._v(" "),l("ul",[l("li",[t._v("Spring Cloud Alibaba：Seata")])]),t._v(" "),l("ol",{attrs:{start:"6"}},[l("li",[t._v("熔断器：用于防止微服务之间的故障扩散，提高系统的容错能力。常见的实现包括：")])]),t._v(" "),l("ul",[l("li",[t._v("Spring Cloud Netflix：Hystrix")]),t._v(" "),l("li",[t._v("Spring Cloud Alibaba：Sentinel、Resilience4j")])]),t._v(" "),l("ol",{attrs:{start:"7"}},[l("li",[t._v("限流和降级：用于防止微服务过载，对请求进行限制和降级处理。常见的实现包括：")])]),t._v(" "),l("ul",[l("li",[t._v("Spring Cloud Netflix：Hystrix")]),t._v(" "),l("li",[t._v("Spring Cloud Alibaba：Sentinel")])]),t._v(" "),l("ol",{attrs:{start:"8"}},[l("li",[t._v("分布式追踪和监控：用于跟踪和监控微服务的请求流程和性能指标。常见的实现包括：")])]),t._v(" "),l("ul",[l("li",[t._v("Spring Cloud Netflix：Spring Cloud Sleuth + Zipkin")]),t._v(" "),l("li",[t._v("Spring Cloud Alibaba：SkyWalking、Sentinel Dashboard")])])])}),[],!1,null,null,null);l.default=a.exports}}]);