(window.webpackJsonp=window.webpackJsonp||[]).push([[211],{541:function(t,n,s){"use strict";s.r(n);var a=s(8),e=Object(a.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),n("h2",{attrs:{id:"_1-spring是什么-特性-有哪些模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-spring是什么-特性-有哪些模块"}},[t._v("#")]),t._v(" 1.Spring是什么？特性？有哪些模块？")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20240305083838658.png",alt:"image-20240305083838658"}})]),t._v(" "),n("p",[t._v("Spring 是一个轻量级、非入侵式的控制反转 (IoC) 和面向切面(AOP) 的框架。")]),t._v(" "),n("p",[t._v("2003年，一个音乐家Rod Johnson决定发展一个轻量级的Java开发框架， Spring 作为Java战场的龙骑兵渐渐崛起，并淘汰了 EJB 这个传统的重装骑兵。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/spring1.png",alt:"spring1"}})]),t._v(" "),n("p",[t._v("到了现在，企业级开发的标配基本就是 Spring5 + Spring Boot 2 + JDK 8")]),t._v(" "),n("h3",{attrs:{id:"spring有哪些特性呢"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring有哪些特性呢"}},[t._v("#")]),t._v(" Spring有哪些特性呢？")]),t._v(" "),n("h2",{attrs:{id:"_2-spring有哪些模块呢"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-spring有哪些模块呢"}},[t._v("#")]),t._v(" 2.Spring有哪些模块呢")]),t._v(" "),n("p",[t._v("Spring 框架是分模块存在，除了最核心的 Spring Core Container 是必要模块之外，其他模块都是 可选 ，大约有 20 多个模块。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20240305084911677.png",alt:"image-20240305084911677"}})]),t._v(" "),n("p",[t._v("最主要的七大模块：")]),t._v(" "),n("ol",[n("li",[t._v("Spring Core ：Spring 核心，它是框架最基础的部分，提供 IOC 和依赖注入 DI 特性。")]),t._v(" "),n("li",[t._v("Spring Context ：Spring 上下文容器，它是 BeanFactory 功能加强的一个子接口。")]),t._v(" "),n("li",[t._v("Spring Web ：它提供 Web 应用开发的支持。")]),t._v(" "),n("li",[t._v("Spring MVC ：它针对 Web 应用中 MVC 思想的实现。")]),t._v(" "),n("li",[t._v("Spring DAO ：提供对 JDBC 抽象层，简化了 JDBC 编码，同时，编码更具有健壮性。")]),t._v(" "),n("li",[t._v("Spring ORM ：它支持用于流行的 ORM 框架的整合，比如：Spring + Hibernate、Spring + iBatis、Spring + JDO 的整合等。")]),t._v(" "),n("li",[t._v("Spring AOP ：即面向切面编程，它提供了与 AOP 联盟兼容的编程实现。")])]),t._v(" "),n("h2",{attrs:{id:"_3-spring有哪些常用注解呢"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-spring有哪些常用注解呢"}},[t._v("#")]),t._v(" 3.Spring有哪些常用注解呢？")]),t._v(" "),n("p",[t._v("Spring有很多模块，甚至广义的SpringBoot、SpringCloud也算是Spring的一部分，我们来分模块，按功能来看一下一些常用的注解")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20240305085001526.png",alt:"image-20240305085001526"}})]),t._v(" "),n("p",[n("strong",[t._v("Web")])]),t._v(" "),n("ul",[n("li",[t._v("@Controller：组合注解（组合了@Component注解），应用在MVC层（控制层）。")]),t._v(" "),n("li",[t._v("@RestController：该注解为一个组合注解，相当于@Controller和@ResponseBody的组合，注解在类上，意味着，该Controller的所有方法都默认加上了@ResponseBody。")]),t._v(" "),n("li",[t._v("@RequestMapping：用于映射Web请求，包括访问路径和参数。如果是Restful风格接口，还可以根据请求类型使用不同的注解：\n"),n("ul",[n("li",[t._v("@GetMapping")]),t._v(" "),n("li",[t._v("@PostMapping")]),t._v(" "),n("li",[t._v("@PutMapping")]),t._v(" "),n("li",[t._v("@DeleteMapping")])])]),t._v(" "),n("li",[t._v("@ResponseBody：支持将返回值放在response内，而不是一个页面，通常用户返回json数据。")]),t._v(" "),n("li",[t._v("@RequestBody：允许request的参数在request体中，而不是在直接连接在地址后面。")]),t._v(" "),n("li",[t._v("@PathVariable：用于接收路径参数，比如@RequestMapping(“/hello/{name}”)申明的路径，将注解放在参数中前，即可获取该值，通常作为Restful的接口实现方法。")])]),t._v(" "),n("p",[n("strong",[t._v("容器")])]),t._v(" "),n("ul",[n("li",[t._v("@Component：表示一个带注释的类是一个“组件”，成为Spring管理的Bean。当使用基于注解的配置和类路径扫描时，这些类被视为自动检测的候选对象。同时@Component还是一个元注解。")]),t._v(" "),n("li",[t._v("@Service：组合注解（组合了@Component注解），应用在service层（业务逻辑层）。")]),t._v(" "),n("li",[t._v("@Repository：组合注解（组合了@Component注解），应用在dao层（数据访问层）。")]),t._v(" "),n("li",[t._v("@Autowired：Spring提供的工具（由Spring的依赖注入工具（BeanPostProcessor、BeanFactoryPostProcessor）自动注入）。")]),t._v(" "),n("li",[t._v("@Qualifier：该注解通常跟 @Autowired 一起使用，当想对注入的过程做更多的控制，@Qualifier 可帮助配置，比如两个以上相同类型的 Bean 时 Spring 无法抉择，用到此注解")]),t._v(" "),n("li",[t._v("@Configuration：声明当前类是一个配置类（相当于一个Spring配置的xml文件）")]),t._v(" "),n("li",[t._v("@Value：可用在字段，构造器参数跟方法参数，指定一个默认值，支持 #{} 跟${} 两个方式。一般将 SpringbBoot 中的application.properties 配置的属性值赋值给变量。")]),t._v(" "),n("li",[t._v("@Bean：注解在方法上，声明当前方法的返回值为一个Bean。返回的Bean对应的类中可以定义init()方法和destroy()方法，然后在@Bean(initMethod=”init”,destroyMethod=”destroy”)定义，在构造之后执行init，在销毁之前执行destroy。")]),t._v(" "),n("li",[t._v("@Scope：定义我们采用什么模式去创建Bean（方法上，得有@Bean） 其设置类型包括：Singleton 、Prototype、Request 、 Session、GlobalSession。")])]),t._v(" "),n("p",[n("strong",[t._v("AOP")])]),t._v(" "),n("ul",[n("li",[n("p",[t._v("@Aspect：声明一个切面（类上） 使用@After、@Before、@Around定义通知（advice），可直接将拦截规则（切点）作为参数。")])]),t._v(" "),n("li",[n("p",[t._v("@After ：在方法执行之后执行（方法上）。")])]),t._v(" "),n("li",[n("p",[t._v("@Before ： 在方法执行之前执行（方法上）。")])]),t._v(" "),n("li",[n("p",[t._v("@Around ： 在方法执行之前与之后执行（方法上）。")])]),t._v(" "),n("li",[n("p",[t._v("@PointCut ： 声明切点，在java配置类中使用@EnableAspectJAutoProxy注解开启Spring对AspectJ代理的支持（类上）。")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Aspect")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明一个切面")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Slf4j")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PermissionDataAspect")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// @annotation 表示的作用是匹配使用指定注解标注的方法")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 切点")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Pointcut")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@annotation(com.demo.common.aspect.annotation.PermissionData)"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("pointCut")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n     \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 环绕通知")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Around")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pointCut()"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("arround")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ProceedingJoinPoint")]),t._v(" point"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" point"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("proceed")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br")])])])]),t._v(" "),n("p",[n("strong",[t._v("事务")])]),t._v(" "),n("ul",[n("li",[t._v("@Transactional：在要开启事务的方法上使用@Transactional注解，即可声明式开启事务。")])]),t._v(" "),n("h2",{attrs:{id:"_4-spring-中应用了哪些设计模式呢"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-spring-中应用了哪些设计模式呢"}},[t._v("#")]),t._v(" 4.Spring 中应用了哪些设计模式呢？")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/studentgitee/note-picture/raw/master/image-20240305092101809.png",alt:"image-20240305092101809"}})]),t._v(" "),n("ol",[n("li",[t._v("工厂模式 : Spring 容器本质是一个大工厂，使用工厂模式通过 BeanFactory、ApplicationContext 创建 bean 对象。")]),t._v(" "),n("li",[t._v("代理模式 : Spring AOP 功能功能就是通过代理模式来实现的，分为动态代理和静态代理。")]),t._v(" "),n("li",[t._v("单例模式 : Spring 中的 Bean 默认都是单例的，这样有利于容器对Bean的管理。")]),t._v(" "),n("li",[t._v("模板模式 : Spring 中 JdbcTemplate、RestTemplate 等以 Template结尾的对数据库、网络等等进行操作的模板类，就使用到了模板模式。")]),t._v(" "),n("li",[t._v("观察者模式 : Spring 事件驱动模型就是观察者模式很经典的一个应用。")]),t._v(" "),n("li",[t._v("适配器模式 :Spring AOP 的增强或通知 (Advice) 使用到了适配器模式、SpringMVC 中也是用到了适配器模式适配 Controller。")]),t._v(" "),n("li",[t._v("策略模式 ：Spring中有一个Resource接口，它的不同实现类，会根据不同的策略去访问资源")])])])}),[],!1,null,null,null);n.default=e.exports}}]);